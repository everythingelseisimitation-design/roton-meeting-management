{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertTeamMemberSchema,\n  insertMeetingSchema,\n  insertFocusSongSchema,\n  insertTaskSchema,\n  insertMeetingMinutesSchema,\n  insertDailyMetricsSchema,\n  insertActionItemSchema,\n  insertCalendarActionSchema,\n  insertHistoryLogSchema,\n} from \"@shared/schema\";\nimport { sendEmail } from \"./services/emailService\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Team member routes\n  app.get('/api/team-members', isAuthenticated, async (req, res) => {\n    try {\n      const teamMembers = await storage.getAllTeamMembers();\n      res.json(teamMembers);\n    } catch (error) {\n      console.error(\"Error fetching team members:\", error);\n      res.status(500).json({ message: \"Failed to fetch team members\" });\n    }\n  });\n\n  app.get('/api/team-members/department/:department', isAuthenticated, async (req, res) => {\n    try {\n      const { department } = req.params;\n      const teamMembers = await storage.getTeamMembersByDepartment(department);\n      res.json(teamMembers);\n    } catch (error) {\n      console.error(\"Error fetching team members by department:\", error);\n      res.status(500).json({ message: \"Failed to fetch team members\" });\n    }\n  });\n\n  app.post('/api/team-members', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertTeamMemberSchema.parse(req.body);\n      const teamMember = await storage.createTeamMember(validatedData, userId);\n      res.status(201).json(teamMember);\n    } catch (error) {\n      console.error(\"Error creating team member:\", error);\n      res.status(500).json({ message: \"Failed to create team member\" });\n    }\n  });\n\n  app.patch('/api/team-members/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      const teamMember = await storage.updateTeamMember(id, updates, userId);\n      res.json(teamMember);\n    } catch (error) {\n      console.error(\"Error updating team member:\", error);\n      res.status(500).json({ message: \"Failed to update team member\" });\n    }\n  });\n\n  app.delete('/api/team-members/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      await storage.deleteTeamMember(id, userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting team member:\", error);\n      res.status(500).json({ message: \"Failed to delete team member\" });\n    }\n  });\n\n  // Meeting routes\n  app.get('/api/meetings', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate, type } = req.query;\n      \n      let meetings;\n      if (startDate && endDate) {\n        meetings = await storage.getMeetingsByDateRange(startDate as string, endDate as string);\n      } else if (type) {\n        meetings = await storage.getMeetingsByType(type as string);\n      } else {\n        meetings = await storage.getAllMeetings();\n      }\n      \n      res.json(meetings);\n    } catch (error) {\n      console.error(\"Error fetching meetings:\", error);\n      res.status(500).json({ message: \"Failed to fetch meetings\" });\n    }\n  });\n\n  app.get('/api/meetings/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const meeting = await storage.getMeetingById(id);\n      if (!meeting) {\n        return res.status(404).json({ message: \"Meeting not found\" });\n      }\n      res.json(meeting);\n    } catch (error) {\n      console.error(\"Error fetching meeting:\", error);\n      res.status(500).json({ message: \"Failed to fetch meeting\" });\n    }\n  });\n\n  app.post('/api/meetings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertMeetingSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      \n      const meeting = await storage.createMeeting(validatedData, userId);\n      \n      // Send email notifications\n      if (meeting.participants && meeting.participants.length > 0) {\n        try {\n          await sendEmail({\n            to: meeting.participants.join(','),\n            subject: `New Meeting: ${meeting.title}`,\n            html: `\n              <h2>New Meeting Scheduled</h2>\n              <p><strong>Title:</strong> ${meeting.title}</p>\n              <p><strong>Date:</strong> ${meeting.date}</p>\n              <p><strong>Time:</strong> ${meeting.time}</p>\n              <p><strong>Description:</strong> ${meeting.description || 'No description provided'}</p>\n            `,\n          });\n        } catch (emailError) {\n          console.error(\"Failed to send email notification:\", emailError);\n        }\n      }\n      \n      res.status(201).json(meeting);\n    } catch (error) {\n      console.error(\"Error creating meeting:\", error);\n      res.status(500).json({ message: \"Failed to create meeting\" });\n    }\n  });\n\n  app.patch('/api/meetings/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      const meeting = await storage.updateMeeting(id, updates, userId);\n      res.json(meeting);\n    } catch (error) {\n      console.error(\"Error updating meeting:\", error);\n      res.status(500).json({ message: \"Failed to update meeting\" });\n    }\n  });\n\n  app.delete('/api/meetings/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      await storage.deleteMeeting(id, userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting meeting:\", error);\n      res.status(500).json({ message: \"Failed to delete meeting\" });\n    }\n  });\n\n  // Focus songs routes\n  app.get('/api/focus-songs', isAuthenticated, async (req, res) => {\n    try {\n      const { active, backCatalog } = req.query;\n      \n      let songs;\n      if (active === 'true') {\n        songs = await storage.getActiveFocusSongs();\n      } else if (backCatalog === 'true') {\n        songs = await storage.getBackCatalogSongs();\n      } else {\n        songs = await storage.getAllFocusSongs();\n      }\n      \n      res.json(songs);\n    } catch (error) {\n      console.error(\"Error fetching focus songs:\", error);\n      res.status(500).json({ message: \"Failed to fetch focus songs\" });\n    }\n  });\n\n  app.get('/api/focus-songs/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const song = await storage.getFocusSongById(id);\n      if (!song) {\n        return res.status(404).json({ message: \"Focus song not found\" });\n      }\n      res.json(song);\n    } catch (error) {\n      console.error(\"Error fetching focus song:\", error);\n      res.status(500).json({ message: \"Failed to fetch focus song\" });\n    }\n  });\n\n  app.post('/api/focus-songs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertFocusSongSchema.parse(req.body);\n      const song = await storage.createFocusSong(validatedData, userId);\n      res.status(201).json(song);\n    } catch (error) {\n      console.error(\"Error creating focus song:\", error);\n      res.status(500).json({ message: \"Failed to create focus song\" });\n    }\n  });\n\n  app.patch('/api/focus-songs/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      const song = await storage.updateFocusSong(id, updates, userId);\n      res.json(song);\n    } catch (error) {\n      console.error(\"Error updating focus song:\", error);\n      res.status(500).json({ message: \"Failed to update focus song\" });\n    }\n  });\n\n  app.delete('/api/focus-songs/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      await storage.deleteFocusSong(id, userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting focus song:\", error);\n      res.status(500).json({ message: \"Failed to delete focus song\" });\n    }\n  });\n\n  // Task routes\n  app.get('/api/tasks', isAuthenticated, async (req, res) => {\n    try {\n      const { assignee, meeting, focusSong, status } = req.query;\n      \n      let tasks;\n      if (assignee) {\n        tasks = await storage.getTasksByAssignee(assignee as string);\n      } else if (meeting) {\n        tasks = await storage.getTasksByMeeting(meeting as string);\n      } else if (focusSong) {\n        tasks = await storage.getTasksByFocusSong(focusSong as string);\n      } else if (status) {\n        tasks = await storage.getTasksByStatus(status as string);\n      } else {\n        tasks = await storage.getAllTasks();\n      }\n      \n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.get('/api/tasks/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const task = await storage.getTaskById(id);\n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error fetching task:\", error);\n      res.status(500).json({ message: \"Failed to fetch task\" });\n    }\n  });\n\n  app.post('/api/tasks', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Preprocess data to handle empty date strings\n      const processedBody = {\n        ...req.body,\n        createdBy: userId,\n        deadline: req.body.deadline === '' ? null : req.body.deadline,\n      };\n      \n      const validatedData = insertTaskSchema.parse(processedBody);\n      \n      const task = await storage.createTask(validatedData, userId);\n      res.status(201).json(task);\n    } catch (error) {\n      console.error(\"Error creating task:\", error);\n      res.status(500).json({ message: \"Failed to create task\" });\n    }\n  });\n\n  app.patch('/api/tasks/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Preprocess data to handle empty date strings\n      const updates = {\n        ...req.body,\n        deadline: req.body.deadline === '' ? null : req.body.deadline,\n      };\n      \n      const task = await storage.updateTask(id, updates, userId);\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  app.delete('/api/tasks/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      await storage.deleteTask(id, userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n      res.status(500).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Meeting minutes routes\n  app.get('/api/meeting-minutes/:meetingId', isAuthenticated, async (req, res) => {\n    try {\n      const { meetingId } = req.params;\n      const minutes = await storage.getMeetingMinutesByMeeting(meetingId);\n      if (!minutes) {\n        return res.status(404).json({ message: \"Meeting minutes not found\" });\n      }\n      res.json(minutes);\n    } catch (error) {\n      console.error(\"Error fetching meeting minutes:\", error);\n      res.status(500).json({ message: \"Failed to fetch meeting minutes\" });\n    }\n  });\n\n  app.post('/api/meeting-minutes', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertMeetingMinutesSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      \n      const minutes = await storage.createMeetingMinutes(validatedData, userId);\n      res.status(201).json(minutes);\n    } catch (error) {\n      console.error(\"Error creating meeting minutes:\", error);\n      res.status(500).json({ message: \"Failed to create meeting minutes\" });\n    }\n  });\n\n  app.patch('/api/meeting-minutes/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      const minutes = await storage.updateMeetingMinutes(id, updates, userId);\n      res.json(minutes);\n    } catch (error) {\n      console.error(\"Error updating meeting minutes:\", error);\n      res.status(500).json({ message: \"Failed to update meeting minutes\" });\n    }\n  });\n\n  // Daily metrics routes\n  app.get('/api/daily-metrics/:focusSongId', isAuthenticated, async (req, res) => {\n    try {\n      const { focusSongId } = req.params;\n      const metrics = await storage.getDailyMetricsByFocusSong(focusSongId);\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching daily metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch daily metrics\" });\n    }\n  });\n\n  app.post('/api/daily-metrics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertDailyMetricsSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      const metrics = await storage.createDailyMetrics(validatedData, userId);\n      res.status(201).json(metrics);\n    } catch (error) {\n      console.error(\"Error creating daily metrics:\", error);\n      res.status(500).json({ message: \"Failed to create daily metrics\" });\n    }\n  });\n\n  app.patch('/api/daily-metrics/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      const metrics = await storage.updateDailyMetrics(id, updates, userId);\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error updating daily metrics:\", error);\n      res.status(500).json({ message: \"Failed to update daily metrics\" });\n    }\n  });\n\n  app.delete('/api/daily-metrics/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      await storage.deleteDailyMetrics(id, userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting daily metrics:\", error);\n      res.status(500).json({ message: \"Failed to delete daily metrics\" });\n    }\n  });\n\n  // Action items routes\n  app.get('/api/action-items', isAuthenticated, async (req, res) => {\n    try {\n      const { type, status, assignedTo } = req.query;\n      let actionItems;\n      \n      if (type) {\n        actionItems = await storage.getActionItemsByType(type as string);\n      } else if (status) {\n        actionItems = await storage.getActionItemsByStatus(status as string);\n      } else if (assignedTo) {\n        actionItems = await storage.getActionItemsByAssignee(assignedTo as string);\n      } else {\n        actionItems = await storage.getAllActionItems();\n      }\n      \n      res.json(actionItems);\n    } catch (error) {\n      console.error(\"Error fetching action items:\", error);\n      res.status(500).json({ message: \"Failed to fetch action items\" });\n    }\n  });\n\n  app.post('/api/action-items', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertActionItemSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      const actionItem = await storage.createActionItem(validatedData, userId);\n      res.status(201).json(actionItem);\n    } catch (error) {\n      console.error(\"Error creating action item:\", error);\n      res.status(500).json({ message: \"Failed to create action item\" });\n    }\n  });\n\n  app.patch('/api/action-items/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      const actionItem = await storage.updateActionItem(id, updates, userId);\n      res.json(actionItem);\n    } catch (error) {\n      console.error(\"Error updating action item:\", error);\n      res.status(500).json({ message: \"Failed to update action item\" });\n    }\n  });\n\n  app.delete('/api/action-items/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      await storage.deleteActionItem(id, userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting action item:\", error);\n      res.status(500).json({ message: \"Failed to delete action item\" });\n    }\n  });\n\n  // Calendar actions routes  \n  app.get('/api/calendar-actions', isAuthenticated, async (req, res) => {\n    try {\n      const { date, startDate, endDate, pending } = req.query;\n      let calendarActions;\n      \n      if (pending === 'true') {\n        calendarActions = await storage.getPendingCalendarActions();\n      } else if (date) {\n        calendarActions = await storage.getCalendarActionsByDate(date as string);\n      } else if (startDate && endDate) {\n        calendarActions = await storage.getCalendarActionsByDateRange(startDate as string, endDate as string);\n      } else {\n        calendarActions = await storage.getAllCalendarActions();\n      }\n      \n      res.json(calendarActions);\n    } catch (error) {\n      console.error(\"Error fetching calendar actions:\", error);\n      res.status(500).json({ message: \"Failed to fetch calendar actions\" });\n    }\n  });\n\n  app.post('/api/calendar-actions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertCalendarActionSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      const calendarAction = await storage.createCalendarAction(validatedData, userId);\n      res.status(201).json(calendarAction);\n    } catch (error) {\n      console.error(\"Error creating calendar action:\", error);\n      res.status(500).json({ message: \"Failed to create calendar action\" });\n    }\n  });\n\n  app.patch('/api/calendar-actions/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      const calendarAction = await storage.updateCalendarAction(id, updates, userId);\n      res.json(calendarAction);\n    } catch (error) {\n      console.error(\"Error updating calendar action:\", error);\n      res.status(500).json({ message: \"Failed to update calendar action\" });\n    }\n  });\n\n  app.delete('/api/calendar-actions/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      await storage.deleteCalendarAction(id, userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting calendar action:\", error);\n      res.status(500).json({ message: \"Failed to delete calendar action\" });\n    }\n  });\n\n  // History log routes\n  app.get('/api/history/:entityType/:entityId', isAuthenticated, async (req, res) => {\n    try {\n      const { entityType, entityId } = req.params;\n      const history = await storage.getHistoryByEntity(entityType, entityId);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching history:\", error);\n      res.status(500).json({ message: \"Failed to fetch history\" });\n    }\n  });\n\n  // Enhanced focus songs routes\n  app.get('/api/focus-songs/category/:category', isAuthenticated, async (req, res) => {\n    try {\n      const { category } = req.params;\n      const songs = await storage.getFocusSongsByCategory(category);\n      res.json(songs);\n    } catch (error) {\n      console.error(\"Error fetching focus songs by category:\", error);\n      res.status(500).json({ message: \"Failed to fetch focus songs by category\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":20668},"server/storage.ts":{"content":"import {\n  users,\n  teamMembers,\n  meetings,\n  focusSongs,\n  tasks,\n  meetingMinutes,\n  dailyMetrics,\n  actionItems,\n  calendarActions,\n  historyLog,\n  type User,\n  type UpsertUser,\n  type TeamMember,\n  type InsertTeamMember,\n  type Meeting,\n  type InsertMeeting,\n  type FocusSong,\n  type InsertFocusSong,\n  type Task,\n  type InsertTask,\n  type MeetingMinutes,\n  type InsertMeetingMinutes,\n  type DailyMetrics,\n  type InsertDailyMetrics,\n  type ActionItem,\n  type InsertActionItem,\n  type CalendarAction,\n  type InsertCalendarAction,\n  type HistoryLog,\n  type InsertHistoryLog,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, gte, lte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Team member operations\n  getAllTeamMembers(): Promise<TeamMember[]>;\n  getTeamMembersByDepartment(department: string): Promise<TeamMember[]>;\n  createTeamMember(teamMember: InsertTeamMember, actorUserId?: string): Promise<TeamMember>;\n  updateTeamMember(id: string, updates: Partial<InsertTeamMember>, actorUserId?: string): Promise<TeamMember>;\n  deleteTeamMember(id: string, actorUserId?: string): Promise<void>;\n  \n  // Meeting operations\n  getAllMeetings(): Promise<Meeting[]>;\n  getMeetingById(id: string): Promise<Meeting | undefined>;\n  getMeetingsByDateRange(startDate: string, endDate: string): Promise<Meeting[]>;\n  getMeetingsByType(type: string): Promise<Meeting[]>;\n  createMeeting(meeting: InsertMeeting, actorUserId?: string): Promise<Meeting>;\n  updateMeeting(id: string, updates: Partial<InsertMeeting>, actorUserId?: string): Promise<Meeting>;\n  deleteMeeting(id: string, actorUserId?: string): Promise<void>;\n  \n  // Focus song operations\n  getAllFocusSongs(): Promise<FocusSong[]>;\n  getFocusSongById(id: string): Promise<FocusSong | undefined>;\n  getActiveFocusSongs(): Promise<FocusSong[]>;\n  getBackCatalogSongs(): Promise<FocusSong[]>;\n  createFocusSong(song: InsertFocusSong, actorUserId?: string): Promise<FocusSong>;\n  updateFocusSong(id: string, updates: Partial<InsertFocusSong>, actorUserId?: string): Promise<FocusSong>;\n  deleteFocusSong(id: string, actorUserId?: string): Promise<void>;\n  \n  // Task operations\n  getAllTasks(): Promise<Task[]>;\n  getTaskById(id: string): Promise<Task | undefined>;\n  getTasksByAssignee(userId: string): Promise<Task[]>;\n  getTasksByMeeting(meetingId: string): Promise<Task[]>;\n  getTasksByFocusSong(focusSongId: string): Promise<Task[]>;\n  getTasksByStatus(status: string): Promise<Task[]>;\n  createTask(task: InsertTask, actorUserId?: string): Promise<Task>;\n  updateTask(id: string, updates: Partial<InsertTask>, actorUserId?: string): Promise<Task>;\n  deleteTask(id: string, actorUserId?: string): Promise<void>;\n  \n  // Meeting minutes operations\n  getMeetingMinutesByMeeting(meetingId: string): Promise<MeetingMinutes | undefined>;\n  createMeetingMinutes(minutes: InsertMeetingMinutes, actorUserId?: string): Promise<MeetingMinutes>;\n  updateMeetingMinutes(id: string, updates: Partial<InsertMeetingMinutes>, actorUserId?: string): Promise<MeetingMinutes>;\n  \n  // Daily metrics operations\n  getDailyMetricsByFocusSong(focusSongId: string): Promise<DailyMetrics[]>;\n  getDailyMetricsByDate(focusSongId: string, date: string): Promise<DailyMetrics[]>;\n  createDailyMetrics(metrics: InsertDailyMetrics, actorUserId?: string): Promise<DailyMetrics>;\n  updateDailyMetrics(id: string, updates: Partial<InsertDailyMetrics>, actorUserId?: string): Promise<DailyMetrics>;\n  deleteDailyMetrics(id: string, actorUserId?: string): Promise<void>;\n  \n  // Action items operations\n  getAllActionItems(): Promise<ActionItem[]>;\n  getActionItemById(id: string): Promise<ActionItem | undefined>;\n  getActionItemsByType(type: string): Promise<ActionItem[]>;\n  getActionItemsByStatus(status: string): Promise<ActionItem[]>;\n  getActionItemsByAssignee(assignedTo: string): Promise<ActionItem[]>;\n  createActionItem(actionItem: InsertActionItem, actorUserId?: string): Promise<ActionItem>;\n  updateActionItem(id: string, updates: Partial<InsertActionItem>, actorUserId?: string): Promise<ActionItem>;\n  deleteActionItem(id: string, actorUserId?: string): Promise<void>;\n  \n  // Calendar actions operations\n  getAllCalendarActions(): Promise<CalendarAction[]>;\n  getCalendarActionsByDate(date: string): Promise<CalendarAction[]>;\n  getCalendarActionsByDateRange(startDate: string, endDate: string): Promise<CalendarAction[]>;\n  getPendingCalendarActions(): Promise<CalendarAction[]>;\n  createCalendarAction(calendarAction: InsertCalendarAction, actorUserId?: string): Promise<CalendarAction>;\n  updateCalendarAction(id: string, updates: Partial<InsertCalendarAction>, actorUserId?: string): Promise<CalendarAction>;\n  deleteCalendarAction(id: string, actorUserId?: string): Promise<void>;\n  \n  // History log operations\n  getHistoryByEntity(entityType: string, entityId: string): Promise<HistoryLog[]>;\n  createHistoryLog(historyLog: InsertHistoryLog): Promise<HistoryLog>;\n  \n  // Enhanced focus song operations\n  getFocusSongsByCategory(category: string): Promise<FocusSong[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  \n  // Helper method to log entity changes\n  private async logEntityChange(\n    entityType: string,\n    entityId: string,\n    action: string,\n    userId: string,\n    oldValue?: any,\n    newValue?: any,\n    fieldName?: string\n  ): Promise<void> {\n    try {\n      await this.createHistoryLog({\n        entityType,\n        entityId,\n        action,\n        userId,\n        fieldName: fieldName || null,\n        oldValue: oldValue ? JSON.stringify(oldValue) : null,\n        newValue: newValue ? JSON.stringify(newValue) : null,\n      });\n    } catch (error) {\n      console.error('Failed to log entity change:', error);\n      // Don't throw here to avoid breaking main operations\n    }\n  }\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Team member operations\n  async getAllTeamMembers(): Promise<TeamMember[]> {\n    return await db.select().from(teamMembers).orderBy(teamMembers.name);\n  }\n\n  async getTeamMembersByDepartment(department: string): Promise<TeamMember[]> {\n    return await db.select().from(teamMembers)\n      .where(eq(teamMembers.department, department as any))\n      .orderBy(teamMembers.name);\n  }\n\n  async createTeamMember(teamMember: InsertTeamMember, actorUserId?: string): Promise<TeamMember> {\n    const [newMember] = await db.insert(teamMembers).values(teamMember).returning();\n    \n    // Log creation\n    if (actorUserId) {\n      await this.logEntityChange(\n        'team_member',\n        newMember.id,\n        'created',\n        actorUserId,\n        null,\n        newMember\n      );\n    }\n    \n    return newMember;\n  }\n\n  async updateTeamMember(id: string, updates: Partial<InsertTeamMember>, actorUserId?: string): Promise<TeamMember> {\n    // Get the current state before update\n    const [oldMember] = await db.select().from(teamMembers).where(eq(teamMembers.id, id));\n    \n    const [updated] = await db\n      .update(teamMembers)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(teamMembers.id, id))\n      .returning();\n    \n    // Log update with field-level changes\n    if (oldMember && actorUserId) {\n      for (const [field, newValue] of Object.entries(updates)) {\n        if (field !== 'updatedAt' && oldMember[field as keyof TeamMember] !== newValue) {\n          await this.logEntityChange(\n            'team_member',\n            id,\n            'updated',\n            actorUserId,\n            oldMember[field as keyof TeamMember],\n            newValue,\n            field\n          );\n        }\n      }\n    }\n    \n    return updated;\n  }\n\n  async deleteTeamMember(id: string, actorUserId?: string): Promise<void> {\n    // Get the member before deletion for logging\n    const [member] = await db.select().from(teamMembers).where(eq(teamMembers.id, id));\n    \n    await db.delete(teamMembers).where(eq(teamMembers.id, id));\n    \n    // Log deletion\n    if (member && actorUserId) {\n      await this.logEntityChange(\n        'team_member',\n        id,\n        'deleted',\n        actorUserId,\n        member,\n        null\n      );\n    }\n  }\n\n  // Meeting operations\n  async getAllMeetings(): Promise<Meeting[]> {\n    return await db.select().from(meetings).orderBy(desc(meetings.date));\n  }\n\n  async getMeetingById(id: string): Promise<Meeting | undefined> {\n    const [meeting] = await db.select().from(meetings).where(eq(meetings.id, id));\n    return meeting;\n  }\n\n  async getMeetingsByDateRange(startDate: string, endDate: string): Promise<Meeting[]> {\n    return await db.select().from(meetings)\n      .where(and(\n        gte(meetings.date, startDate),\n        lte(meetings.date, endDate)\n      ))\n      .orderBy(meetings.date);\n  }\n\n  async getMeetingsByType(type: string): Promise<Meeting[]> {\n    return await db.select().from(meetings)\n      .where(eq(meetings.type, type as any))\n      .orderBy(desc(meetings.date));\n  }\n\n  async createMeeting(meeting: InsertMeeting, actorUserId?: string): Promise<Meeting> {\n    const [newMeeting] = await db.insert(meetings).values(meeting).returning();\n    \n    // Log creation\n    await this.logEntityChange(\n      'meeting',\n      newMeeting.id,\n      'created',\n      actorUserId || meeting.createdBy,\n      null,\n      newMeeting\n    );\n    \n    return newMeeting;\n  }\n\n  async updateMeeting(id: string, updates: Partial<InsertMeeting>, actorUserId?: string): Promise<Meeting> {\n    // Get the current state before update\n    const [oldMeeting] = await db.select().from(meetings).where(eq(meetings.id, id));\n    \n    const [updated] = await db\n      .update(meetings)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(meetings.id, id))\n      .returning();\n    \n    // Log update with field-level changes\n    if (oldMeeting && actorUserId) {\n      for (const [field, newValue] of Object.entries(updates)) {\n        if (field !== 'updatedAt' && oldMeeting[field as keyof Meeting] !== newValue) {\n          await this.logEntityChange(\n            'meeting',\n            id,\n            'updated',\n            actorUserId,\n            oldMeeting[field as keyof Meeting],\n            newValue,\n            field\n          );\n        }\n      }\n    }\n    \n    return updated;\n  }\n\n  async deleteMeeting(id: string, actorUserId?: string): Promise<void> {\n    // Get the meeting before deletion for logging\n    const [meeting] = await db.select().from(meetings).where(eq(meetings.id, id));\n    \n    await db.delete(meetings).where(eq(meetings.id, id));\n    \n    // Log deletion\n    if (meeting && actorUserId) {\n      await this.logEntityChange(\n        'meeting',\n        id,\n        'deleted',\n        actorUserId,\n        meeting,\n        null\n      );\n    }\n  }\n\n  // Focus song operations\n  async getAllFocusSongs(): Promise<FocusSong[]> {\n    return await db.select().from(focusSongs).orderBy(desc(focusSongs.createdAt));\n  }\n\n  async getFocusSongById(id: string): Promise<FocusSong | undefined> {\n    const [song] = await db.select().from(focusSongs).where(eq(focusSongs.id, id));\n    return song;\n  }\n\n  async getActiveFocusSongs(): Promise<FocusSong[]> {\n    return await db.select().from(focusSongs)\n      .where(and(\n        eq(focusSongs.category, 'active_focus'),\n        or(\n          eq(focusSongs.status, 'active'),\n          eq(focusSongs.status, 'promoted'),\n          eq(focusSongs.status, 'planning')\n        )\n      ))\n      .orderBy(desc(focusSongs.createdAt));\n  }\n\n  async getBackCatalogSongs(): Promise<FocusSong[]> {\n    return await db.select().from(focusSongs)\n      .where(eq(focusSongs.category, 'back_catalog'))\n      .orderBy(desc(focusSongs.createdAt));\n  }\n\n  async createFocusSong(song: InsertFocusSong, actorUserId?: string): Promise<FocusSong> {\n    const [newSong] = await db.insert(focusSongs).values(song).returning();\n    \n    // Log creation\n    if (actorUserId) {\n      await this.logEntityChange(\n        'focus_song',\n        newSong.id,\n        'created',\n        actorUserId,\n        null,\n        newSong\n      );\n    }\n    \n    return newSong;\n  }\n\n  async updateFocusSong(id: string, updates: Partial<InsertFocusSong>, actorUserId?: string): Promise<FocusSong> {\n    // Get the current state before update\n    const [oldSong] = await db.select().from(focusSongs).where(eq(focusSongs.id, id));\n    \n    const [updated] = await db\n      .update(focusSongs)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(focusSongs.id, id))\n      .returning();\n    \n    // Log update with field-level changes\n    if (oldSong && actorUserId) {\n      for (const [field, newValue] of Object.entries(updates)) {\n        if (field !== 'updatedAt' && oldSong[field as keyof FocusSong] !== newValue) {\n          await this.logEntityChange(\n            'focus_song',\n            id,\n            'updated',\n            actorUserId,\n            oldSong[field as keyof FocusSong],\n            newValue,\n            field\n          );\n        }\n      }\n    }\n    \n    return updated;\n  }\n\n  async deleteFocusSong(id: string, actorUserId?: string): Promise<void> {\n    // Get the song before deletion for logging\n    const [song] = await db.select().from(focusSongs).where(eq(focusSongs.id, id));\n    \n    // First, handle foreign key relationships to prevent constraint violations\n    // Update tasks to remove reference to this focus song\n    await db.update(tasks)\n      .set({ focusSongId: null })\n      .where(eq(tasks.focusSongId, id));\n    \n    // Delete daily metrics that reference this focus song (or set to null if preferred)\n    await db.delete(dailyMetrics).where(eq(dailyMetrics.focusSongId, id));\n    \n    // Now safe to delete the focus song\n    await db.delete(focusSongs).where(eq(focusSongs.id, id));\n    \n    // Log deletion\n    if (song && actorUserId) {\n      await this.logEntityChange(\n        'focus_song',\n        id,\n        'deleted',\n        actorUserId,\n        song,\n        null\n      );\n    }\n  }\n\n  // Task operations\n  async getAllTasks(): Promise<Task[]> {\n    return await db.select().from(tasks).orderBy(desc(tasks.createdAt));\n  }\n\n  async getTaskById(id: string): Promise<Task | undefined> {\n    const [task] = await db.select().from(tasks).where(eq(tasks.id, id));\n    return task;\n  }\n\n  async getTasksByAssignee(userId: string): Promise<Task[]> {\n    return await db.select().from(tasks)\n      .where(eq(tasks.assignedTo, userId))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async getTasksByMeeting(meetingId: string): Promise<Task[]> {\n    return await db.select().from(tasks)\n      .where(eq(tasks.meetingId, meetingId))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async getTasksByFocusSong(focusSongId: string): Promise<Task[]> {\n    return await db.select().from(tasks)\n      .where(eq(tasks.focusSongId, focusSongId))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async getTasksByStatus(status: string): Promise<Task[]> {\n    return await db.select().from(tasks)\n      .where(eq(tasks.status, status as any))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async createTask(task: InsertTask, actorUserId?: string): Promise<Task> {\n    const [newTask] = await db.insert(tasks).values(task).returning();\n    \n    // Log creation\n    await this.logEntityChange(\n      'task',\n      newTask.id,\n      'created',\n      actorUserId || task.createdBy,\n      null,\n      newTask\n    );\n    \n    return newTask;\n  }\n\n  async updateTask(id: string, updates: Partial<InsertTask>, actorUserId?: string): Promise<Task> {\n    // Get the current state before update\n    const [oldTask] = await db.select().from(tasks).where(eq(tasks.id, id));\n    \n    const [updated] = await db\n      .update(tasks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(tasks.id, id))\n      .returning();\n    \n    // Log update with field-level changes\n    if (oldTask && actorUserId) {\n      for (const [field, newValue] of Object.entries(updates)) {\n        if (field !== 'updatedAt' && oldTask[field as keyof Task] !== newValue) {\n          await this.logEntityChange(\n            'task',\n            id,\n            field === 'status' ? 'status_changed' : 'updated',\n            actorUserId,\n            oldTask[field as keyof Task],\n            newValue,\n            field\n          );\n        }\n      }\n    }\n    \n    return updated;\n  }\n\n  async deleteTask(id: string, actorUserId?: string): Promise<void> {\n    // Get the task before deletion for logging\n    const [task] = await db.select().from(tasks).where(eq(tasks.id, id));\n    \n    await db.delete(tasks).where(eq(tasks.id, id));\n    \n    // Log deletion\n    if (task && actorUserId) {\n      await this.logEntityChange(\n        'task',\n        id,\n        'deleted',\n        actorUserId,\n        task,\n        null\n      );\n    }\n  }\n\n  // Meeting minutes operations\n  async getMeetingMinutesByMeeting(meetingId: string): Promise<MeetingMinutes | undefined> {\n    const [minutes] = await db.select().from(meetingMinutes)\n      .where(eq(meetingMinutes.meetingId, meetingId));\n    return minutes;\n  }\n\n  async createMeetingMinutes(minutes: InsertMeetingMinutes, actorUserId?: string): Promise<MeetingMinutes> {\n    const [newMinutes] = await db.insert(meetingMinutes).values(minutes).returning();\n    \n    // Log creation\n    await this.logEntityChange(\n      'meeting_minutes',\n      newMinutes.id,\n      'created',\n      actorUserId || minutes.createdBy,\n      null,\n      newMinutes\n    );\n    \n    return newMinutes;\n  }\n\n  async updateMeetingMinutes(id: string, updates: Partial<InsertMeetingMinutes>, actorUserId?: string): Promise<MeetingMinutes> {\n    // Get the current state before update\n    const [oldMinutes] = await db.select().from(meetingMinutes).where(eq(meetingMinutes.id, id));\n    \n    const [updated] = await db\n      .update(meetingMinutes)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(meetingMinutes.id, id))\n      .returning();\n    \n    // Log update with field-level changes\n    if (oldMinutes && actorUserId) {\n      for (const [field, newValue] of Object.entries(updates)) {\n        if (field !== 'updatedAt' && oldMinutes[field as keyof MeetingMinutes] !== newValue) {\n          await this.logEntityChange(\n            'meeting_minutes',\n            id,\n            'updated',\n            actorUserId,\n            oldMinutes[field as keyof MeetingMinutes],\n            newValue,\n            field\n          );\n        }\n      }\n    }\n    \n    return updated;\n  }\n\n  // Daily metrics operations\n  async getDailyMetricsByFocusSong(focusSongId: string): Promise<DailyMetrics[]> {\n    return await db.select()\n      .from(dailyMetrics)\n      .where(eq(dailyMetrics.focusSongId, focusSongId))\n      .orderBy(desc(dailyMetrics.date));\n  }\n\n  async getDailyMetricsByDate(focusSongId: string, date: string): Promise<DailyMetrics[]> {\n    return await db.select()\n      .from(dailyMetrics)\n      .where(and(\n        eq(dailyMetrics.focusSongId, focusSongId),\n        eq(dailyMetrics.date, date)\n      ));\n  }\n\n  async createDailyMetrics(metrics: InsertDailyMetrics, actorUserId?: string): Promise<DailyMetrics> {\n    const [newMetrics] = await db.insert(dailyMetrics)\n      .values(metrics)\n      .returning();\n    \n    // Log creation\n    await this.logEntityChange(\n      'daily_metrics',\n      newMetrics.id,\n      'created',\n      actorUserId || metrics.createdBy,\n      null,\n      newMetrics\n    );\n    \n    return newMetrics;\n  }\n\n  async updateDailyMetrics(id: string, updates: Partial<InsertDailyMetrics>, actorUserId?: string): Promise<DailyMetrics> {\n    // Get the current state before update\n    const [oldMetrics] = await db.select().from(dailyMetrics).where(eq(dailyMetrics.id, id));\n    \n    const [updatedMetrics] = await db.update(dailyMetrics)\n      .set(updates)\n      .where(eq(dailyMetrics.id, id))\n      .returning();\n    \n    // Log update with field-level changes\n    if (oldMetrics && actorUserId) {\n      for (const [field, newValue] of Object.entries(updates)) {\n        if (oldMetrics[field as keyof DailyMetrics] !== newValue) {\n          await this.logEntityChange(\n            'daily_metrics',\n            id,\n            'updated',\n            actorUserId,\n            oldMetrics[field as keyof DailyMetrics],\n            newValue,\n            field\n          );\n        }\n      }\n    }\n    \n    return updatedMetrics;\n  }\n\n  async deleteDailyMetrics(id: string, actorUserId?: string): Promise<void> {\n    // Get the metrics before deletion for logging\n    const [metrics] = await db.select().from(dailyMetrics).where(eq(dailyMetrics.id, id));\n    \n    await db.delete(dailyMetrics).where(eq(dailyMetrics.id, id));\n    \n    // Log deletion\n    if (metrics && actorUserId) {\n      await this.logEntityChange(\n        'daily_metrics',\n        id,\n        'deleted',\n        actorUserId,\n        metrics,\n        null\n      );\n    }\n  }\n\n  // Action items operations\n  async getAllActionItems(): Promise<ActionItem[]> {\n    return await db.select().from(actionItems).orderBy(desc(actionItems.createdAt));\n  }\n\n  async getActionItemById(id: string): Promise<ActionItem | undefined> {\n    const [actionItem] = await db.select().from(actionItems).where(eq(actionItems.id, id));\n    return actionItem;\n  }\n\n  async getActionItemsByType(type: string): Promise<ActionItem[]> {\n    return await db.select()\n      .from(actionItems)\n      .where(eq(actionItems.type, type))\n      .orderBy(desc(actionItems.createdAt));\n  }\n\n  async getActionItemsByStatus(status: string): Promise<ActionItem[]> {\n    return await db.select()\n      .from(actionItems)\n      .where(eq(actionItems.status, status as any))\n      .orderBy(desc(actionItems.createdAt));\n  }\n\n  async getActionItemsByAssignee(assignedTo: string): Promise<ActionItem[]> {\n    return await db.select()\n      .from(actionItems)\n      .where(eq(actionItems.assignedTo, assignedTo))\n      .orderBy(desc(actionItems.createdAt));\n  }\n\n  async createActionItem(actionItem: InsertActionItem, actorUserId?: string): Promise<ActionItem> {\n    const [newActionItem] = await db.insert(actionItems)\n      .values(actionItem)\n      .returning();\n    \n    // Log creation\n    await this.logEntityChange(\n      'action_item',\n      newActionItem.id,\n      'created',\n      actorUserId || actionItem.createdBy,\n      null,\n      newActionItem\n    );\n    \n    return newActionItem;\n  }\n\n  async updateActionItem(id: string, updates: Partial<InsertActionItem>, actorUserId?: string): Promise<ActionItem> {\n    // Get the current state before update\n    const [oldActionItem] = await db.select().from(actionItems).where(eq(actionItems.id, id));\n    \n    const [updatedActionItem] = await db.update(actionItems)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(actionItems.id, id))\n      .returning();\n    \n    // Log update with field-level changes\n    if (oldActionItem && actorUserId) {\n      for (const [field, newValue] of Object.entries(updates)) {\n        if (field !== 'updatedAt' && oldActionItem[field as keyof ActionItem] !== newValue) {\n          await this.logEntityChange(\n            'action_item',\n            id,\n            field === 'status' ? 'status_changed' : 'updated',\n            actorUserId,\n            oldActionItem[field as keyof ActionItem],\n            newValue,\n            field\n          );\n        }\n      }\n    }\n    \n    return updatedActionItem;\n  }\n\n  async deleteActionItem(id: string, actorUserId?: string): Promise<void> {\n    // Get the action item before deletion for logging\n    const [actionItem] = await db.select().from(actionItems).where(eq(actionItems.id, id));\n    \n    await db.delete(actionItems).where(eq(actionItems.id, id));\n    \n    // Log deletion\n    if (actionItem && actorUserId) {\n      await this.logEntityChange(\n        'action_item',\n        id,\n        'deleted',\n        actorUserId,\n        actionItem,\n        null\n      );\n    }\n  }\n\n  // Calendar actions operations\n  async getAllCalendarActions(): Promise<CalendarAction[]> {\n    return await db.select().from(calendarActions).orderBy(desc(calendarActions.date));\n  }\n\n  async getCalendarActionsByDate(date: string): Promise<CalendarAction[]> {\n    return await db.select()\n      .from(calendarActions)\n      .where(eq(calendarActions.date, date))\n      .orderBy(calendarActions.title);\n  }\n\n  async getCalendarActionsByDateRange(startDate: string, endDate: string): Promise<CalendarAction[]> {\n    return await db.select()\n      .from(calendarActions)\n      .where(and(\n        gte(calendarActions.date, startDate),\n        lte(calendarActions.date, endDate)\n      ))\n      .orderBy(calendarActions.date);\n  }\n\n  async getPendingCalendarActions(): Promise<CalendarAction[]> {\n    return await db.select()\n      .from(calendarActions)\n      .where(eq(calendarActions.isCompleted, false))\n      .orderBy(calendarActions.date);\n  }\n\n  async createCalendarAction(calendarAction: InsertCalendarAction, actorUserId?: string): Promise<CalendarAction> {\n    const [newCalendarAction] = await db.insert(calendarActions)\n      .values(calendarAction)\n      .returning();\n    \n    // Log creation\n    await this.logEntityChange(\n      'calendar_action',\n      newCalendarAction.id,\n      'created',\n      actorUserId || calendarAction.createdBy,\n      null,\n      newCalendarAction\n    );\n    \n    return newCalendarAction;\n  }\n\n  async updateCalendarAction(id: string, updates: Partial<InsertCalendarAction>, actorUserId?: string): Promise<CalendarAction> {\n    // Get the current state before update\n    const [oldAction] = await db.select().from(calendarActions).where(eq(calendarActions.id, id));\n    \n    const [updatedCalendarAction] = await db.update(calendarActions)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(calendarActions.id, id))\n      .returning();\n    \n    // Log update with field-level changes\n    if (oldAction && actorUserId) {\n      for (const [field, newValue] of Object.entries(updates)) {\n        if (field !== 'updatedAt' && oldAction[field as keyof CalendarAction] !== newValue) {\n          await this.logEntityChange(\n            'calendar_action',\n            id,\n            field === 'isCompleted' ? 'status_changed' : 'updated',\n            actorUserId,\n            oldAction[field as keyof CalendarAction],\n            newValue,\n            field\n          );\n        }\n      }\n    }\n    \n    return updatedCalendarAction;\n  }\n\n  async deleteCalendarAction(id: string, actorUserId?: string): Promise<void> {\n    // Get the action before deletion for logging\n    const [action] = await db.select().from(calendarActions).where(eq(calendarActions.id, id));\n    \n    await db.delete(calendarActions).where(eq(calendarActions.id, id));\n    \n    // Log deletion\n    if (action && actorUserId) {\n      await this.logEntityChange(\n        'calendar_action',\n        id,\n        'deleted',\n        actorUserId,\n        action,\n        null\n      );\n    }\n  }\n\n  // History log operations\n  async getHistoryByEntity(entityType: string, entityId: string): Promise<HistoryLog[]> {\n    return await db.select()\n      .from(historyLog)\n      .where(and(\n        eq(historyLog.entityType, entityType),\n        eq(historyLog.entityId, entityId)\n      ))\n      .orderBy(desc(historyLog.createdAt));\n  }\n\n  async createHistoryLog(history: InsertHistoryLog): Promise<HistoryLog> {\n    const [newHistoryLog] = await db.insert(historyLog)\n      .values(history)\n      .returning();\n    return newHistoryLog;\n  }\n\n  // Enhanced focus song operations\n  async getFocusSongsByCategory(category: string): Promise<FocusSong[]> {\n    return await db.select()\n      .from(focusSongs)\n      .where(eq(focusSongs.category, category as any))\n      .orderBy(desc(focusSongs.createdAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":28206},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  uuid,\n  pgEnum,\n  boolean,\n  date,\n  time,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Enums\nexport const departmentEnum = pgEnum('department', ['marketing', 'digital', 'ar_international']);\nexport const roleEnum = pgEnum('role', ['admin', 'head_of_marketing', 'marketing_team', 'digital', 'ar_international']);\nexport const meetingTypeEnum = pgEnum('meeting_type', ['marketing', 'focus_songs_update', 'focus_songs_strategy', 'weekly_recap']);\nexport const taskStatusEnum = pgEnum('task_status', ['todo', 'in_progress', 'done', 'paused', 'not_done', 'cancelled']);\nexport const songStatusEnum = pgEnum('song_status', ['active', 'promoted', 'planning', 'paused']);\nexport const trackCategoryEnum = pgEnum('track_category', ['active_focus', 'back_catalog']);\nexport const channelEnum = pgEnum('channel', ['youtube', 'spotify', 'social_media', 'press', 'radio', 'general']);\nexport const actionStatusEnum = pgEnum('action_status', ['planned', 'in_progress', 'completed', 'postponed']);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  department: departmentEnum(\"department\"),\n  role: roleEnum(\"role\").default('marketing_team'),\n  jobTitle: varchar(\"job_title\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Team members table\nexport const teamMembers = pgTable(\"team_members\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: varchar(\"name\").notNull(),\n  department: departmentEnum(\"department\").notNull(),\n  jobTitle: varchar(\"job_title\").notNull(),\n  responsibilities: text(\"responsibilities\"),\n  email: varchar(\"email\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Meetings table\nexport const meetings = pgTable(\"meetings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  type: meetingTypeEnum(\"type\").notNull(),\n  description: text(\"description\"),\n  date: date(\"date\").notNull(),\n  time: time(\"time\").notNull(),\n  duration: varchar(\"duration\").default('60'),\n  participants: text(\"participants\").array(),\n  agenda: text(\"agenda\").array(),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  status: varchar(\"status\").default('scheduled'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Focus songs table\nexport const focusSongs = pgTable(\"focus_songs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  artist: varchar(\"artist\").notNull(),\n  status: songStatusEnum(\"status\").default('active'),\n  category: trackCategoryEnum(\"category\").default('active_focus'),\n  releaseDate: date(\"release_date\"),\n  youtubeProgress: text(\"youtube_progress\"),\n  socialMediaProgress: text(\"social_media_progress\"),\n  spotifyProgress: text(\"spotify_progress\"),\n  radioProgress: text(\"radio_progress\"),\n  pressProgress: text(\"press_progress\"),\n  youtubeResponsible: varchar(\"youtube_responsible\"),\n  socialMediaResponsible: varchar(\"social_media_responsible\"),\n  spotifyResponsible: varchar(\"spotify_responsible\"),\n  radioResponsible: varchar(\"radio_responsible\"),\n  pressResponsible: varchar(\"press_responsible\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Tasks table\nexport const tasks = pgTable(\"tasks\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  assignedTo: uuid(\"assigned_to\").references(() => teamMembers.id),\n  assignedToName: varchar(\"assigned_to_name\"),\n  status: taskStatusEnum(\"status\").default('todo'),\n  priority: varchar(\"priority\").default('medium'),\n  deadline: date(\"deadline\"),\n  meetingId: uuid(\"meeting_id\").references(() => meetings.id),\n  focusSongId: uuid(\"focus_song_id\").references(() => focusSongs.id),\n  channel: channelEnum(\"channel\"),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Meeting minutes table\nexport const meetingMinutes = pgTable(\"meeting_minutes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  meetingId: uuid(\"meeting_id\").references(() => meetings.id).notNull(),\n  participants: text(\"participants\").array(),\n  duration: varchar(\"duration\"),\n  agenda: text(\"agenda\").array(),\n  decisions: text(\"decisions\").array(),\n  assignedTasks: text(\"assigned_tasks\").array(),\n  focusSongsDiscussed: text(\"focus_songs_discussed\").array(),\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Daily metrics tracking for focus songs\nexport const dailyMetrics = pgTable(\"daily_metrics\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  focusSongId: uuid(\"focus_song_id\").references(() => focusSongs.id).notNull(),\n  date: date(\"date\").notNull(),\n  channel: channelEnum(\"channel\").notNull(),\n  // YouTube metrics\n  youtubeViews: varchar(\"youtube_views\"),\n  youtubeAdViews: varchar(\"youtube_ad_views\"),\n  youtubeAvgTime: varchar(\"youtube_avg_time\"),\n  // Spotify metrics\n  spotifyStreams: varchar(\"spotify_streams\"),\n  spotifyPlaylistEntries: varchar(\"spotify_playlist_entries\"),\n  // Social Media metrics\n  instagramViews: varchar(\"instagram_views\"),\n  tiktokViews: varchar(\"tiktok_views\"),\n  tiktokVideosPerSound: varchar(\"tiktok_videos_per_sound\"),\n  // Enhanced Social Media Tracking\n  // TikTok Post Tracking\n  tiktokPostLink: varchar(\"tiktok_post_link\"),\n  tiktokPostViews: varchar(\"tiktok_post_views\"),\n  tiktokPostShares: varchar(\"tiktok_post_shares\"),\n  tiktokPostLikes: varchar(\"tiktok_post_likes\"),\n  tiktokPostSaves: varchar(\"tiktok_post_saves\"),\n  // Instagram Post Tracking\n  instagramPostLink: varchar(\"instagram_post_link\"),\n  instagramPostViews: varchar(\"instagram_post_views\"),\n  instagramPostLikes: varchar(\"instagram_post_likes\"),\n  // User Generated Content Tracking\n  instagramVideosUsingSound: varchar(\"instagram_videos_using_sound\"),\n  tiktokVideosUsingSound: varchar(\"tiktok_videos_using_sound\"),\n  // Press metrics\n  pressReleasePickups: varchar(\"press_release_pickups\"),\n  // Radio metrics\n  radioStationsPlaying: varchar(\"radio_stations_playing\"),\n  radioTotalPlays: varchar(\"radio_total_plays\"),\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Action planning and assignments\nexport const actionItems = pgTable(\"action_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  type: varchar(\"type\").notNull(), // 'focus_song', 'task', 'meeting', 'calendar'\n  relatedId: uuid(\"related_id\"), // ID of related focus song, task, meeting\n  channel: channelEnum(\"channel\"),\n  assignedTo: varchar(\"assigned_to\"),\n  assignedToName: varchar(\"assigned_to_name\"),\n  status: actionStatusEnum(\"status\").default('planned'),\n  priority: varchar(\"priority\").default('medium'),\n  dueDate: date(\"due_date\"),\n  completedDate: date(\"completed_date\"),\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Calendar actions - \"Things We Said We Gonna Do\"\nexport const calendarActions = pgTable(\"calendar_actions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  date: date(\"date\").notNull(),\n  sourceType: varchar(\"source_type\").notNull(), // 'task', 'meeting', 'focus_song', 'manual'\n  sourceId: uuid(\"source_id\"), // ID of source item\n  assignedTo: varchar(\"assigned_to\"),\n  assignedToName: varchar(\"assigned_to_name\"),\n  isCompleted: boolean(\"is_completed\").default(false),\n  completedDate: date(\"completed_date\"),\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Historical tracking for auditing\nexport const historyLog = pgTable(\"history_log\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityType: varchar(\"entity_type\").notNull(), // 'focus_song', 'task', 'meeting', etc.\n  entityId: uuid(\"entity_id\").notNull(),\n  action: varchar(\"action\").notNull(), // 'created', 'updated', 'deleted', 'status_changed'\n  fieldName: varchar(\"field_name\"),\n  oldValue: text(\"old_value\"),\n  newValue: text(\"new_value\"),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  meetings: many(meetings),\n  tasks: many(tasks),\n  meetingMinutes: many(meetingMinutes),\n}));\n\nexport const teamMembersRelations = relations(teamMembers, ({ one, many }) => ({\n  user: one(users, { fields: [teamMembers.userId], references: [users.id] }),\n  tasks: many(tasks),\n}));\n\nexport const meetingsRelations = relations(meetings, ({ one, many }) => ({\n  createdBy: one(users, { fields: [meetings.createdBy], references: [users.id] }),\n  tasks: many(tasks),\n  meetingMinutes: many(meetingMinutes),\n}));\n\nexport const focusSongsRelations = relations(focusSongs, ({ many }) => ({\n  tasks: many(tasks),\n}));\n\nexport const tasksRelations = relations(tasks, ({ one }) => ({\n  assignedTo: one(teamMembers, { fields: [tasks.assignedTo], references: [teamMembers.id] }),\n  createdBy: one(users, { fields: [tasks.createdBy], references: [users.id] }),\n  meeting: one(meetings, { fields: [tasks.meetingId], references: [meetings.id] }),\n  focusSong: one(focusSongs, { fields: [tasks.focusSongId], references: [focusSongs.id] }),\n}));\n\nexport const meetingMinutesRelations = relations(meetingMinutes, ({ one }) => ({\n  meeting: one(meetings, { fields: [meetingMinutes.meetingId], references: [meetings.id] }),\n  createdBy: one(users, { fields: [meetingMinutes.createdBy], references: [users.id] }),\n}));\n\nexport const dailyMetricsRelations = relations(dailyMetrics, ({ one }) => ({\n  focusSong: one(focusSongs, { fields: [dailyMetrics.focusSongId], references: [focusSongs.id] }),\n  createdBy: one(users, { fields: [dailyMetrics.createdBy], references: [users.id] }),\n}));\n\nexport const actionItemsRelations = relations(actionItems, ({ one }) => ({\n  createdBy: one(users, { fields: [actionItems.createdBy], references: [users.id] }),\n}));\n\nexport const calendarActionsRelations = relations(calendarActions, ({ one }) => ({\n  createdBy: one(users, { fields: [calendarActions.createdBy], references: [users.id] }),\n}));\n\nexport const historyLogRelations = relations(historyLog, ({ one }) => ({\n  user: one(users, { fields: [historyLog.userId], references: [users.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTeamMemberSchema = createInsertSchema(teamMembers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMeetingSchema = createInsertSchema(meetings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFocusSongSchema = createInsertSchema(focusSongs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMeetingMinutesSchema = createInsertSchema(meetingMinutes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDailyMetricsSchema = createInsertSchema(dailyMetrics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertActionItemSchema = createInsertSchema(actionItems).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCalendarActionSchema = createInsertSchema(calendarActions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertHistoryLogSchema = createInsertSchema(historyLog).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type TeamMember = typeof teamMembers.$inferSelect;\nexport type InsertTeamMember = z.infer<typeof insertTeamMemberSchema>;\nexport type Meeting = typeof meetings.$inferSelect;\nexport type InsertMeeting = z.infer<typeof insertMeetingSchema>;\nexport type FocusSong = typeof focusSongs.$inferSelect;\nexport type InsertFocusSong = z.infer<typeof insertFocusSongSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type MeetingMinutes = typeof meetingMinutes.$inferSelect;\nexport type InsertMeetingMinutes = z.infer<typeof insertMeetingMinutesSchema>;\nexport type DailyMetrics = typeof dailyMetrics.$inferSelect;\nexport type InsertDailyMetrics = z.infer<typeof insertDailyMetricsSchema>;\nexport type ActionItem = typeof actionItems.$inferSelect;\nexport type InsertActionItem = z.infer<typeof insertActionItemSchema>;\nexport type CalendarAction = typeof calendarActions.$inferSelect;\nexport type InsertCalendarAction = z.infer<typeof insertCalendarActionSchema>;\nexport type HistoryLog = typeof historyLog.$inferSelect;\nexport type InsertHistoryLog = z.infer<typeof insertHistoryLogSchema>;\n","size_bytes":14403},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Calendar from \"@/pages/calendar\";\nimport FocusSongs from \"@/pages/focus-songs\";\nimport Tasks from \"@/pages/tasks\";\nimport Team from \"@/pages/team\";\nimport Meetings from \"@/pages/meetings\";\nimport MainLayout from \"@/components/layout/main-layout\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n  \n  // Prefetch commonly used data once when user is authenticated\n  useEffect(() => {\n    if (isAuthenticated) {\n      // Prefetch shared data to avoid repeated API calls during navigation\n      queryClient.prefetchQuery({ queryKey: ['/api/team-members'] });\n      queryClient.prefetchQuery({ queryKey: ['/api/focus-songs'] });\n    }\n  }, [isAuthenticated]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <MainLayout>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/calendar\" component={Calendar} />\n          <Route path=\"/focus-songs\" component={FocusSongs} />\n          <Route path=\"/tasks\" component={Tasks} />\n          <Route path=\"/team\" component={Team} />\n          <Route path=\"/meetings\" component={Meetings} />\n        </MainLayout>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Toaster />\n      <Router />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2044},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --radius: 0.5rem;\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(0, 0%, 0%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 0%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 0%);\n  --primary: hsl(220, 100%, 35%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(215, 25%, 15%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(215, 25%, 15%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(220, 100%, 35%);\n  --chart-1: hsl(220, 100%, 35%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(0, 0%, 0%);\n  --sidebar-primary: hsl(220, 100%, 35%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(215, 25%, 15%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(220, 100%, 35%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(0, 0%, 100%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --primary: hsl(220, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(215, 25%, 15%);\n  --secondary-foreground: hsl(210, 40%, 96%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 3%, 46%);\n  --accent: hsl(215, 25%, 15%);\n  --accent-foreground: hsl(210, 40%, 96%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(207, 28%, 18%);\n  --ring: hsl(220, 100%, 50%);\n  --sidebar: hsl(228, 10%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85%);\n  --sidebar-primary: hsl(220, 100%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(215, 25%, 15%);\n  --sidebar-accent-foreground: hsl(210, 40%, 96%);\n  --sidebar-border: hsl(210, 5%, 26%);\n  --sidebar-ring: hsl(220, 100%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', ui-sans-serif, system-ui;\n  }\n}\n\n.meeting-card {\n  transition: all 0.2s ease-in-out;\n}\n\n.meeting-card:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.status-todo { \n  @apply bg-gray-100 text-gray-700; \n}\n.status-progress { \n  @apply bg-blue-100 text-blue-700; \n}\n.status-done { \n  @apply bg-green-100 text-green-700; \n}\n\n.nav-item {\n  transition: all 0.2s ease-in-out;\n}\n\n.nav-item:hover {\n  background-color: hsl(210, 40%, 96%);\n}\n\n.nav-item.active {\n  background-color: hsl(220, 100%, 35%);\n  color: white;\n}\n\n.dark .nav-item:hover {\n  background-color: hsl(215, 25%, 15%);\n}\n\n.dark .nav-item.active {\n  background-color: hsl(220, 100%, 50%);\n  color: white;\n}\n\n.dark .status-todo { \n  @apply bg-gray-800 text-gray-300; \n}\n.dark .status-progress { \n  @apply bg-blue-900 text-blue-300; \n}\n.dark .status-done { \n  @apply bg-green-900 text-green-300; \n}\n","size_bytes":3454},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/emailService.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  console.warn(\"SENDGRID_API_KEY environment variable not set. Email notifications will be disabled.\");\n}\n\nconst mailService = new MailService();\nif (process.env.SENDGRID_API_KEY) {\n  mailService.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\ninterface EmailParams {\n  to: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  if (!process.env.SENDGRID_API_KEY) {\n    console.log(\"Email would be sent:\", params);\n    return true; // Return true for development when no API key is set\n  }\n\n  try {\n    await mailService.send({\n      to: params.to,\n      from: process.env.SENDGRID_FROM_EMAIL || 'noreply@roton.com',\n      subject: params.subject,\n      text: params.text,\n      html: params.html,\n    });\n    console.log(\"Email sent successfully to:\", params.to);\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n","size_bytes":1041},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Construct URL from queryKey\n    let url = queryKey[0] as string;\n    \n    // If there's a second element that's an object, convert it to query parameters\n    if (queryKey.length > 1 && typeof queryKey[1] === 'object' && queryKey[1] !== null) {\n      const params = new URLSearchParams();\n      const paramObj = queryKey[1] as Record<string, string>;\n      \n      Object.entries(paramObj).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, String(value));\n        }\n      });\n      \n      if (params.toString()) {\n        url += `?${params.toString()}`;\n      }\n    } else if (queryKey.length > 1) {\n      // If additional elements are strings, join them as path segments\n      url = queryKey.join(\"/\");\n    }\n\n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2134},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/calendar.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay, isToday } from \"date-fns\";\nimport { ChevronLeft, ChevronRight, Plus, CheckSquare, Square, Clock, User, MoreHorizontal, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertCalendarActionSchema, CalendarAction, TeamMember } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport NewMeetingDialog from \"@/components/meetings/new-meeting-dialog\";\n\nconst calendarActionFormSchema = insertCalendarActionSchema.omit({\n  createdBy: true,\n}).extend({\n  date: z.string().min(1, \"Date is required\"),\n});\n\ntype CalendarActionFormData = z.infer<typeof calendarActionFormSchema>;\n\nexport default function Calendar() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [isNewMeetingOpen, setIsNewMeetingOpen] = useState(false);\n  const [isNewActionOpen, setIsNewActionOpen] = useState(false);\n  const [isEditActionOpen, setIsEditActionOpen] = useState(false);\n  const [selectedAction, setSelectedAction] = useState<CalendarAction | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const startDate = format(monthStart, 'yyyy-MM-dd');\n  const endDate = format(monthEnd, 'yyyy-MM-dd');\n\n  const { data: meetings, isLoading } = useQuery({\n    queryKey: ['/api/meetings', { startDate, endDate }],\n  });\n\n  const { data: calendarActions, isLoading: isActionsLoading } = useQuery({\n    queryKey: ['/api/calendar-actions', { startDate, endDate }],\n  });\n\n  const { data: teamMembers } = useQuery({\n    queryKey: ['/api/team-members'],\n  });\n\n  const days = eachDayOfInterval({ start: monthStart, end: monthEnd });\n\n  // Calendar actions mutations\n  const createActionMutation = useMutation({\n    mutationFn: (data: CalendarActionFormData) => apiRequest('POST', '/api/calendar-actions', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar-actions'] });\n      setIsNewActionOpen(false);\n      toast({ title: \"Action created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create action\", variant: \"destructive\" });\n    },\n  });\n\n  const updateActionMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<CalendarActionFormData> }) => \n      apiRequest('PATCH', `/api/calendar-actions/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar-actions'] });\n      setIsEditActionOpen(false);\n      setSelectedAction(null);\n      toast({ title: \"Action updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update action\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteActionMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/calendar-actions/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar-actions'] });\n      toast({ title: \"Action deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete action\", variant: \"destructive\" });\n    },\n  });\n\n  const getMeetingsForDate = (date: Date) => {\n    if (!Array.isArray(meetings)) return [];\n    return meetings.filter((meeting: any) => \n      isSameDay(new Date(meeting.date), date)\n    );\n  };\n\n  const getCalendarActionsForDate = (date: Date) => {\n    if (!Array.isArray(calendarActions)) return [];\n    return calendarActions.filter((action: CalendarAction) => \n      isSameDay(new Date(action.date), date)\n    );\n  };\n\n  const getPendingActions = () => {\n    if (!Array.isArray(calendarActions)) return [];\n    return calendarActions.filter((action: CalendarAction) => !action.isCompleted);\n  };\n\n  const getCompletedActions = () => {\n    if (!Array.isArray(calendarActions)) return [];\n    return calendarActions.filter((action: CalendarAction) => action.isCompleted);\n  };\n\n  const getMeetingTypeColor = (type: string) => {\n    switch (type) {\n      case 'marketing':\n        return 'bg-green-100 text-green-700';\n      case 'focus_songs_update':\n        return 'bg-blue-100 text-blue-700';\n      case 'focus_songs_strategy':\n        return 'bg-purple-100 text-purple-700';\n      case 'weekly_recap':\n        return 'bg-orange-100 text-orange-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getMeetingTypeName = (type: string) => {\n    switch (type) {\n      case 'marketing':\n        return 'Marketing';\n      case 'focus_songs_update':\n        return 'Focus Songs Update';\n      case 'focus_songs_strategy':\n        return 'Focus Songs Strategy';\n      case 'weekly_recap':\n        return 'Weekly Recap';\n      default:\n        return type;\n    }\n  };\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (direction === 'prev') {\n        newDate.setMonth(newDate.getMonth() - 1);\n      } else {\n        newDate.setMonth(newDate.getMonth() + 1);\n      }\n      return newDate;\n    });\n  };\n\n  const handleCreateAction = (data: CalendarActionFormData) => {\n    createActionMutation.mutate(data);\n  };\n\n  const handleUpdateAction = (data: CalendarActionFormData) => {\n    if (selectedAction) {\n      updateActionMutation.mutate({ id: selectedAction.id, data });\n    }\n  };\n\n  const handleDeleteAction = (id: string) => {\n    deleteActionMutation.mutate(id);\n  };\n\n  const handleToggleComplete = (action: CalendarAction) => {\n    const updates = {\n      isCompleted: !action.isCompleted,\n      completedDate: !action.isCompleted ? format(new Date(), 'yyyy-MM-dd') : null,\n    };\n    updateActionMutation.mutate({ id: action.id, data: updates });\n  };\n\n  const handleEditAction = (action: CalendarAction) => {\n    setSelectedAction(action);\n    setIsEditActionOpen(true);\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Calendar</h2>\n          <p className=\"text-sm text-muted-foreground\">Weekly meeting schedule and planning</p>\n        </div>\n        <Button \n          onClick={() => setIsNewMeetingOpen(true)}\n          data-testid=\"button-new-meeting\"\n          className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          New Meeting\n        </Button>\n      </div>\n\n      {/* Calendar Navigation */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-semibold\">\n              {format(currentDate, 'MMMM yyyy')}\n            </h3>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => navigateMonth('prev')}\n                data-testid=\"button-prev-month\"\n              >\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => setCurrentDate(new Date())}\n                data-testid=\"button-today\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => navigateMonth('next')}\n                data-testid=\"button-next-month\"\n              >\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Calendar Grid */}\n          <div className=\"grid grid-cols-7 gap-1 mb-4\">\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n              <div key={day} className=\"p-3 text-center text-sm font-medium text-muted-foreground\">\n                {day}\n              </div>\n            ))}\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-7 gap-1\">\n              {[...Array(35)].map((_, i) => (\n                <div key={i} className=\"h-24 bg-muted animate-pulse rounded\"></div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-7 gap-1\">\n              {days.map(day => {\n                const dayMeetings = getMeetingsForDate(day);\n                const isCurrentMonth = isSameMonth(day, currentDate);\n                const isDayToday = isToday(day);\n\n                return (\n                  <div\n                    key={day.toISOString()}\n                    className={`min-h-[120px] p-2 border rounded transition-colors ${\n                      isCurrentMonth \n                        ? 'bg-background hover:bg-muted/50' \n                        : 'bg-muted/30'\n                    } ${isDayToday ? 'ring-2 ring-primary' : ''}`}\n                    data-testid={`calendar-day-${format(day, 'yyyy-MM-dd')}`}\n                  >\n                    <div className={`text-sm font-medium mb-1 ${\n                      isCurrentMonth ? 'text-foreground' : 'text-muted-foreground'\n                    } ${isDayToday ? 'text-primary font-bold' : ''}`}>\n                      {format(day, 'd')}\n                    </div>\n                    \n                    <div className=\"flex flex-col gap-1\">\n                      {/* Enhanced Meeting Display */}\n                      {dayMeetings.map((meeting: any) => (\n                        <div\n                          key={meeting.id}\n                          className={`group relative text-xs p-2 rounded-md border-l-2 cursor-pointer transition-all hover:ring-1 hover:ring-current overflow-hidden leading-tight ${getMeetingTypeColor(meeting.type)} dark:bg-opacity-80`}\n                          title={`${meeting.title} at ${meeting.time}`}\n                          data-testid={`meeting-${meeting.id}`}\n                        >\n                          <div className=\"flex items-center justify-between gap-2 min-w-0\">\n                            <div className=\"flex items-center gap-1 shrink-0\">\n                              <Clock className=\"w-3 h-3\" />\n                              <span className=\"font-semibold tabular-nums\">{format(new Date(`2000-01-01T${meeting.time}`), 'HH:mm')}</span>\n                            </div>\n                            <Badge variant=\"secondary\" className=\"text-xs px-1 py-0 h-4 shrink-0 whitespace-nowrap max-w-[60%] truncate hidden sm:inline-flex\">\n                              {getMeetingTypeName(meeting.type)}\n                            </Badge>\n                          </div>\n                          <div className=\"mt-1 font-medium line-clamp-2\">{meeting.title}</div>\n                          {meeting.participants && meeting.participants.length > 0 && (\n                            <div className=\"flex items-center mt-1 text-[11px] opacity-75 gap-1 truncate\">\n                              <User className=\"w-3 h-3\" />\n                              <span>{meeting.participants.length} members</span>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                      \n                      {/* Calendar Actions for this day */}\n                      {getCalendarActionsForDate(day).map((action: CalendarAction) => (\n                        <div\n                          key={action.id}\n                          className={`group relative text-xs p-2 rounded-md border-l-2 border-amber-400 cursor-pointer transition-all hover:ring-1 hover:ring-current overflow-hidden leading-tight ${\n                            action.isCompleted \n                              ? 'bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-300' \n                              : 'bg-amber-50 text-amber-700 dark:bg-amber-900/20 dark:text-amber-300'\n                          }`}\n                          title={action.description || action.title}\n                          data-testid={`calendar-action-${action.id}`}\n                        >\n                          <div className=\"flex items-center justify-between gap-2 min-w-0\">\n                            <div className=\"flex items-center gap-1 shrink-0 min-w-0\">\n                              {action.isCompleted ? <CheckSquare className=\"w-3 h-3\" /> : <Square className=\"w-3 h-3\" />}\n                              <span className={`font-medium truncate ${action.isCompleted ? 'line-through' : ''}`}>\n                                {action.title}\n                              </span>\n                            </div>\n                            <Badge variant=\"outline\" className=\"text-xs px-1 py-0 h-4 shrink-0 whitespace-nowrap hidden sm:inline-flex\">\n                              Action\n                            </Badge>\n                          </div>\n                          {action.assignedToName && (\n                            <div className=\"flex items-center mt-1 text-[11px] opacity-75 gap-1 truncate\">\n                              <User className=\"w-3 h-3\" />\n                              <span>{action.assignedToName}</span>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Meeting Types Legend */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">Meeting Types</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div className=\"flex items-center space-x-3\">\n              <Badge className=\"bg-green-100 text-green-700\" data-testid=\"legend-marketing\">Marketing</Badge>\n              <div className=\"text-sm text-muted-foreground\">\n                <div>Monday</div>\n                <div>Marketing Team Only</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Badge className=\"bg-blue-100 text-blue-700\" data-testid=\"legend-focus-update\">Focus Songs Update</Badge>\n              <div className=\"text-sm text-muted-foreground\">\n                <div>Tuesday</div>\n                <div>Full Team</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Badge className=\"bg-purple-100 text-purple-700\" data-testid=\"legend-focus-strategy\">Focus Songs Strategy</Badge>\n              <div className=\"text-sm text-muted-foreground\">\n                <div>Wednesday</div>\n                <div>Full Team</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Badge className=\"bg-orange-100 text-orange-700\" data-testid=\"legend-weekly-recap\">Weekly Recap</Badge>\n              <div className=\"text-sm text-muted-foreground\">\n                <div>Friday</div>\n                <div>Full Team</div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Things We Said We Gonna Do Section */}\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-lg font-semibold\">Things We Said We Gonna Do</CardTitle>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Track commitments and action items across all meetings\n              </p>\n            </div>\n            <Button \n              onClick={() => setIsNewActionOpen(true)}\n              data-testid=\"button-new-action\"\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Action\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {isActionsLoading ? (\n            <div className=\"space-y-3\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-muted animate-pulse rounded\"></div>\n              ))}\n            </div>\n          ) : (\n            <>\n              {/* Pending Actions */}\n              <div>\n                <h4 className=\"font-medium mb-3 flex items-center\">\n                  <Square className=\"w-4 h-4 mr-2\" />\n                  Pending ({getPendingActions().length})\n                </h4>\n                <div className=\"space-y-2\">\n                  {getPendingActions().length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Square className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                      <p>No pending actions</p>\n                      <p className=\"text-xs\">Create an action to track commitments</p>\n                    </div>\n                  ) : (\n                    getPendingActions().map((action: CalendarAction) => (\n                      <div\n                        key={action.id}\n                        className=\"group flex items-center justify-between p-3 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg hover:bg-amber-100 dark:hover:bg-amber-900/30 transition-colors\"\n                        data-testid={`pending-action-${action.id}`}\n                      >\n                        <div className=\"flex items-center space-x-3 flex-1\">\n                          <Checkbox\n                            checked={false}\n                            onCheckedChange={() => handleToggleComplete(action)}\n                            data-testid={`checkbox-action-${action.id}`}\n                          />\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-amber-800 dark:text-amber-200\">{action.title}</div>\n                            {action.description && (\n                              <div className=\"text-sm text-amber-600 dark:text-amber-300 mt-1\">\n                                {action.description}\n                              </div>\n                            )}\n                            <div className=\"flex items-center space-x-4 mt-2 text-xs text-amber-600 dark:text-amber-400\">\n                              <span className=\"flex items-center\">\n                                <Clock className=\"w-3 h-3 mr-1\" />\n                                {format(new Date(action.date), 'MMM d, yyyy')}\n                              </span>\n                              {action.assignedToName && (\n                                <span className=\"flex items-center\">\n                                  <User className=\"w-3 h-3 mr-1\" />\n                                  {action.assignedToName}\n                                </span>\n                              )}\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {action.sourceType || 'manual'}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                              data-testid={`dropdown-action-${action.id}`}\n                            >\n                              <MoreHorizontal className=\"w-4 h-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => handleEditAction(action)} data-testid={`edit-action-${action.id}`}>\n                              <Edit className=\"w-4 h-4 mr-2\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleDeleteAction(action.id)}\n                              className=\"text-destructive\"\n                              data-testid={`delete-action-${action.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n\n              {/* Completed Actions */}\n              <div>\n                <h4 className=\"font-medium mb-3 flex items-center\">\n                  <CheckSquare className=\"w-4 h-4 mr-2\" />\n                  Completed ({getCompletedActions().length})\n                </h4>\n                <div className=\"space-y-2\">\n                  {getCompletedActions().length === 0 ? (\n                    <div className=\"text-center py-4 text-muted-foreground\">\n                      <CheckSquare className=\"w-6 h-6 mx-auto mb-2 opacity-50\" />\n                      <p className=\"text-sm\">No completed actions yet</p>\n                    </div>\n                  ) : (\n                    getCompletedActions().map((action: CalendarAction) => (\n                      <div\n                        key={action.id}\n                        className=\"group flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg opacity-75\"\n                        data-testid={`completed-action-${action.id}`}\n                      >\n                        <div className=\"flex items-center space-x-3 flex-1\">\n                          <Checkbox\n                            checked={true}\n                            onCheckedChange={() => handleToggleComplete(action)}\n                            data-testid={`checkbox-completed-${action.id}`}\n                          />\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-green-800 dark:text-green-200 line-through\">{action.title}</div>\n                            {action.description && (\n                              <div className=\"text-sm text-green-600 dark:text-green-300 mt-1 line-through\">\n                                {action.description}\n                              </div>\n                            )}\n                            <div className=\"flex items-center space-x-4 mt-2 text-xs text-green-600 dark:text-green-400\">\n                              <span className=\"flex items-center\">\n                                <Clock className=\"w-3 h-3 mr-1\" />\n                                Completed: {action.completedDate ? format(new Date(action.completedDate), 'MMM d, yyyy') : 'Unknown'}\n                              </span>\n                              {action.assignedToName && (\n                                <span className=\"flex items-center\">\n                                  <User className=\"w-3 h-3 mr-1\" />\n                                  {action.assignedToName}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                              data-testid={`dropdown-completed-${action.id}`}\n                            >\n                              <MoreHorizontal className=\"w-4 h-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem \n                              onClick={() => handleDeleteAction(action.id)}\n                              className=\"text-destructive\"\n                              data-testid={`delete-completed-${action.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      <NewMeetingDialog open={isNewMeetingOpen} onOpenChange={setIsNewMeetingOpen} />\n      \n      {/* New Calendar Action Dialog */}\n      <NewCalendarActionDialog \n        open={isNewActionOpen} \n        onOpenChange={setIsNewActionOpen}\n        onSubmit={handleCreateAction}\n        isLoading={createActionMutation.isPending}\n        teamMembers={Array.isArray(teamMembers) ? teamMembers : []}\n      />\n      \n      {/* Edit Calendar Action Dialog */}\n      <EditCalendarActionDialog \n        open={isEditActionOpen}\n        onOpenChange={setIsEditActionOpen}\n        action={selectedAction}\n        onSubmit={handleUpdateAction}\n        isLoading={updateActionMutation.isPending}\n        teamMembers={Array.isArray(teamMembers) ? teamMembers : []}\n      />\n    </div>\n  );\n}\n\n// New Calendar Action Dialog Component\ninterface NewCalendarActionDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSubmit: (data: CalendarActionFormData) => void;\n  isLoading: boolean;\n  teamMembers: TeamMember[];\n}\n\nfunction NewCalendarActionDialog({ open, onOpenChange, onSubmit, isLoading, teamMembers }: NewCalendarActionDialogProps) {\n  const form = useForm<CalendarActionFormData>({\n    resolver: zodResolver(calendarActionFormSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      date: format(new Date(), 'yyyy-MM-dd'),\n      sourceType: 'manual',\n      assignedTo: '',\n      assignedToName: '',\n      isCompleted: false,\n    },\n  });\n\n  const handleSubmit = (data: CalendarActionFormData) => {\n    // Convert \"none\" to null for assignedTo\n    const processedData = {\n      ...data,\n      assignedTo: data.assignedTo === \"none\" ? null : data.assignedTo,\n      assignedToName: data.assignedTo === \"none\" ? null : data.assignedToName,\n    };\n    onSubmit(processedData);\n    form.reset();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>New Calendar Action</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"What needs to be done?\" data-testid=\"input-action-title\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} value={field.value || ''} placeholder=\"Additional details...\" data-testid=\"textarea-action-description\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-action-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"sourceType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Source</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-action-source\">\n                          <SelectValue placeholder=\"Select source\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"manual\">Manual</SelectItem>\n                        <SelectItem value=\"meeting\">Meeting</SelectItem>\n                        <SelectItem value=\"task\">Task</SelectItem>\n                        <SelectItem value=\"focus_song\">Focus Song</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"assignedTo\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assigned To (Optional)</FormLabel>\n                    <Select onValueChange={(value) => {\n                      field.onChange(value);\n                      const member = teamMembers.find(m => m.id === value);\n                      if (member) {\n                        form.setValue('assignedToName', member.name);\n                      } else {\n                        form.setValue('assignedToName', '');\n                      }\n                    }} value={field.value || ''}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-action-assignee\">\n                          <SelectValue placeholder=\"Select team member\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"none\">None</SelectItem>\n                        {teamMembers.map((member) => (\n                          <SelectItem key={member.id} value={member.id}>\n                            {member.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              {/* Hidden field to track assignedToName */}\n              <FormField\n                control={form.control}\n                name=\"assignedToName\"\n                render={({ field }) => (\n                  <FormItem style={{ display: 'none' }}>\n                    <FormControl>\n                      <Input {...field} value={field.value || ''} type=\"hidden\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)} disabled={isLoading}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading} data-testid=\"button-create-action\">\n                {isLoading ? 'Creating...' : 'Create Action'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Edit Calendar Action Dialog Component\ninterface EditCalendarActionDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  action: CalendarAction | null;\n  onSubmit: (data: CalendarActionFormData) => void;\n  isLoading: boolean;\n  teamMembers: TeamMember[];\n}\n\nfunction EditCalendarActionDialog({ open, onOpenChange, action, onSubmit, isLoading, teamMembers }: EditCalendarActionDialogProps) {\n  const form = useForm<CalendarActionFormData>({\n    resolver: zodResolver(calendarActionFormSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      date: '',\n      sourceType: 'manual',\n      assignedTo: '',\n      assignedToName: '',\n      isCompleted: false,\n    },\n  });\n\n  // Pre-fill form when action changes\n  React.useEffect(() => {\n    if (action && open) {\n      form.reset({\n        title: action.title,\n        description: action.description || '',\n        date: action.date,\n        sourceType: action.sourceType,\n        assignedTo: action.assignedTo || '',\n        assignedToName: action.assignedToName || '',\n        isCompleted: action.isCompleted,\n      });\n    }\n  }, [action, open, form]);\n\n  const handleSubmit = (data: CalendarActionFormData) => {\n    onSubmit(data);\n  };\n\n  if (!action) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>Edit Calendar Action</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"What needs to be done?\" data-testid=\"input-edit-action-title\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} value={field.value || ''} placeholder=\"Additional details...\" data-testid=\"textarea-edit-action-description\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-edit-action-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"sourceType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Source</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-action-source\">\n                          <SelectValue placeholder=\"Select source\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"manual\">Manual</SelectItem>\n                        <SelectItem value=\"meeting\">Meeting</SelectItem>\n                        <SelectItem value=\"task\">Task</SelectItem>\n                        <SelectItem value=\"focus_song\">Focus Song</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"assignedTo\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assigned To (Optional)</FormLabel>\n                    <Select onValueChange={(value) => {\n                      field.onChange(value);\n                      const member = teamMembers.find(m => m.id === value);\n                      if (member) {\n                        form.setValue('assignedToName', member.name);\n                      }\n                    }} value={field.value || ''}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-action-assignee\">\n                          <SelectValue placeholder=\"Select team member\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {teamMembers.map((member) => (\n                          <SelectItem key={member.id} value={member.id}>\n                            {member.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)} disabled={isLoading}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading} data-testid=\"button-update-action\">\n                {isLoading ? 'Updating...' : 'Update Action'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":39354},"client/src/pages/dashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Calendar, Music, Users, CheckCircle, Plus, Bell, Square, CheckSquare, Clock, User, TrendingUp, AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport MeetingCard from \"@/components/meetings/meeting-card\";\nimport NewMeetingDialog from \"@/components/meetings/new-meeting-dialog\";\nimport EditMeetingDialog from \"@/components/meetings/edit-meeting-dialog\";\nimport { useState } from \"react\";\nimport { format, startOfWeek, endOfWeek } from \"date-fns\";\nimport { CalendarAction, type Meeting } from \"@shared/schema\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Dashboard() {\n  const [isNewMeetingOpen, setIsNewMeetingOpen] = useState(false);\n  const [isEditMeetingOpen, setIsEditMeetingOpen] = useState(false);\n  const [selectedMeeting, setSelectedMeeting] = useState<Meeting | null>(null);\n  const [selectedMeetingId, setSelectedMeetingId] = useState<string | null>(null);\n  const [deletingMeetingId, setDeletingMeetingId] = useState<string | null>(null);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const today = new Date();\n  const weekStart = format(startOfWeek(today), 'yyyy-MM-dd');\n  const weekEnd = format(endOfWeek(today), 'yyyy-MM-dd');\n\n  const { data: weeklyMeetings, isLoading: meetingsLoading } = useQuery({\n    queryKey: ['/api/meetings', { startDate: weekStart, endDate: weekEnd }],\n  });\n\n  const { data: focusSongs, isLoading: songsLoading } = useQuery({\n    queryKey: ['/api/focus-songs', { active: 'true' }],\n  });\n\n  const { data: teamMembers, isLoading: teamLoading } = useQuery({\n    queryKey: ['/api/team-members'],\n  });\n\n  const { data: calendarActions, isLoading: actionsLoading } = useQuery({\n    queryKey: ['/api/calendar-actions'],\n  });\n\n  const { data: allTasks, isLoading: tasksLoading } = useQuery({\n    queryKey: ['/api/tasks'],\n  });\n\n  // Delete meeting mutation\n  const deleteMeetingMutation = useMutation({\n    mutationFn: async (meetingId: string) => {\n      await apiRequest('DELETE', `/api/meetings/${meetingId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/meetings'] });\n      setDeletingMeetingId(null);\n      toast({\n        title: \"Success\",\n        description: \"Meeting deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      setDeletingMeetingId(null);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete meeting\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handler functions\n  const handleEditMeeting = (meeting: Meeting) => {\n    setSelectedMeeting(meeting);\n    setSelectedMeetingId(meeting.id);\n    setIsEditMeetingOpen(true);\n  };\n\n  const handleDeleteMeeting = (meetingId: string) => {\n    setDeletingMeetingId(meetingId);\n    deleteMeetingMutation.mutate(meetingId);\n  };\n\n  // Filter tasks client-side instead of multiple API calls\n  const pendingTasks = Array.isArray(allTasks) ? allTasks.filter((task: any) => task.status === 'todo') : [];\n  const completedTasks = Array.isArray(allTasks) ? allTasks.filter((task: any) => task.status === 'done') : [];\n  const inProgressTasks = Array.isArray(allTasks) ? allTasks.filter((task: any) => task.status === 'in_progress') : [];\n  \n  // Enhanced stats with calendar actions\n  const pendingActions = Array.isArray(calendarActions) ? calendarActions.filter((action: CalendarAction) => !action.isCompleted) : [];\n  const completedActions = Array.isArray(calendarActions) ? calendarActions.filter((action: CalendarAction) => action.isCompleted) : [];\n  \n  const stats = {\n    focusSongs: Array.isArray(focusSongs) ? focusSongs.length : 0,\n    pendingTasks: pendingTasks.length,\n    weeklyMeetings: Array.isArray(weeklyMeetings) ? weeklyMeetings.length : 0,\n    teamMembers: Array.isArray(teamMembers) ? teamMembers.length : 0,\n    pendingActions: pendingActions.length,\n    completedActions: completedActions.length,\n    totalActions: Array.isArray(calendarActions) ? calendarActions.length : 0,\n    completedTasks: completedTasks.length,\n    inProgressTasks: inProgressTasks.length,\n    totalTasks: Array.isArray(allTasks) ? allTasks.length : 0,\n  };\n  \n  // Calculate completion rates\n  const actionCompletionRate = stats.totalActions > 0 ? Math.round((stats.completedActions / stats.totalActions) * 100) : 0;\n  const taskCompletionRate = stats.totalTasks > 0 ? Math.round((stats.completedTasks / stats.totalTasks) * 100) : 0;\n\n  const departmentCounts = Array.isArray(teamMembers) ? teamMembers.reduce((acc: any, member: any) => {\n    acc[member.department] = (acc[member.department] || 0) + 1;\n    return acc;\n  }, {}) : {};\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Dashboard</h2>\n          <p className=\"text-sm text-muted-foreground\">Comprehensive overview of meetings, tasks, focus songs, and action items</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\" \n            size=\"icon\"\n            data-testid=\"button-notifications\"\n            className=\"relative text-muted-foreground hover:text-foreground\"\n          >\n            <Bell className=\"w-6 h-6\" />\n            <span className=\"absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-400\"></span>\n          </Button>\n          <Button \n            onClick={() => setIsNewMeetingOpen(true)}\n            data-testid=\"button-new-meeting\"\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Meeting\n          </Button>\n        </div>\n      </div>\n\n      {/* Dashboard Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        {/* Week Overview */}\n        <div className=\"lg:col-span-2\">\n          <Card data-testid=\"card-week-overview\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-lg font-semibold\">This Week's Meetings</h3>\n                <span className=\"text-sm text-muted-foreground\">\n                  {format(startOfWeek(today), 'MMM d')} - {format(endOfWeek(today), 'MMM d, yyyy')}\n                </span>\n              </div>\n\n              {meetingsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(4)].map((_, i) => (\n                    <div key={i} className=\"h-20 bg-muted animate-pulse rounded-lg\"></div>\n                  ))}\n                </div>\n              ) : !Array.isArray(weeklyMeetings) || weeklyMeetings.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No meetings scheduled for this week</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {Array.isArray(weeklyMeetings) && weeklyMeetings.map((meeting: any) => (\n                    <MeetingCard \n                      key={meeting.id} \n                      meeting={meeting} \n                      onEditMeeting={handleEditMeeting} \n                      onDeleteMeeting={handleDeleteMeeting} \n                      isUpdating={deletingMeetingId === meeting.id}\n                    />\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"space-y-6\">\n          <Card data-testid=\"card-quick-stats\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Quick Stats</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Active Focus Songs</span>\n                  <span className=\"text-lg font-semibold\" data-testid=\"stat-focus-songs\">{stats.focusSongs}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Pending Tasks</span>\n                  <span className=\"text-lg font-semibold\" data-testid=\"stat-pending-tasks\">{stats.pendingTasks}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">This Week's Meetings</span>\n                  <span className=\"text-lg font-semibold\" data-testid=\"stat-weekly-meetings\">{stats.weeklyMeetings}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Pending Actions</span>\n                  <span className=\"text-lg font-semibold\" data-testid=\"stat-pending-actions\">{stats.pendingActions}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Team Members</span>\n                  <span className=\"text-lg font-semibold\" data-testid=\"stat-team-members\">{stats.teamMembers}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-completion-overview\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Completion Overview</h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-muted-foreground\">Actions Progress</span>\n                    <span className=\"text-sm font-medium\">{actionCompletionRate}%</span>\n                  </div>\n                  <Progress value={actionCompletionRate} className=\"h-2\" data-testid=\"progress-actions\" />\n                  <div className=\"flex items-center justify-between mt-1 text-xs text-muted-foreground\">\n                    <span>{stats.completedActions} completed</span>\n                    <span>{stats.pendingActions} pending</span>\n                  </div>\n                </div>\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-muted-foreground\">Tasks Progress</span>\n                    <span className=\"text-sm font-medium\">{taskCompletionRate}%</span>\n                  </div>\n                  <Progress value={taskCompletionRate} className=\"h-2\" data-testid=\"progress-tasks\" />\n                  <div className=\"flex items-center justify-between mt-1 text-xs text-muted-foreground\">\n                    <span>{stats.completedTasks} completed</span>\n                    <span>{stats.pendingTasks + stats.inProgressTasks} active</span>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 pt-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <TrendingUp className=\"w-4 h-4 text-green-500\" />\n                    <div>\n                      <div className=\"text-sm font-medium\">{stats.completedActions + stats.completedTasks}</div>\n                      <div className=\"text-xs text-muted-foreground\">Total Completed</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <AlertCircle className=\"w-4 h-4 text-amber-500\" />\n                    <div>\n                      <div className=\"text-sm font-medium\">{stats.pendingActions + stats.pendingTasks}</div>\n                      <div className=\"text-xs text-muted-foreground\">Needs Attention</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Things We Said We Gonna Do Section */}\n      <Card className=\"mb-8\" data-testid=\"card-things-we-said\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <CheckSquare className=\"w-5 h-5\" />\n            <span>Things We Said We Gonna Do</span>\n            <Badge variant=\"secondary\" className=\"ml-2\">\n              {stats.pendingActions} pending\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {actionsLoading ? (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-20 bg-muted animate-pulse rounded-lg\"></div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Pending Actions */}\n              <div>\n                <h4 className=\"font-medium mb-3 flex items-center\">\n                  <Square className=\"w-4 h-4 mr-2 text-amber-500\" />\n                  Pending ({stats.pendingActions})\n                </h4>\n                <div className=\"space-y-3\">\n                  {pendingActions.length === 0 ? (\n                    <div className=\"text-center py-6 text-muted-foreground\">\n                      <CheckSquare className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                      <p className=\"text-sm\">All caught up!</p>\n                    </div>\n                  ) : (\n                    pendingActions.slice(0, 5).map((action: CalendarAction) => (\n                      <div\n                        key={action.id}\n                        className=\"flex items-start space-x-3 p-3 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg\"\n                        data-testid={`dashboard-pending-action-${action.id}`}\n                      >\n                        <Square className=\"w-4 h-4 mt-0.5 text-amber-600\" />\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"font-medium text-amber-800 dark:text-amber-200 truncate\">{action.title}</p>\n                          <div className=\"flex items-center space-x-3 mt-1 text-xs text-amber-600 dark:text-amber-400\">\n                            <span className=\"flex items-center\">\n                              <Clock className=\"w-3 h-3 mr-1\" />\n                              {format(new Date(action.date), 'MMM d')}\n                            </span>\n                            {action.assignedToName && (\n                              <span className=\"flex items-center\">\n                                <User className=\"w-3 h-3 mr-1\" />\n                                {action.assignedToName}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                  {pendingActions.length > 5 && (\n                    <div className=\"text-center\">\n                      <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-pending-actions\">\n                        View {pendingActions.length - 5} more\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Recently Completed Actions */}\n              <div>\n                <h4 className=\"font-medium mb-3 flex items-center\">\n                  <CheckSquare className=\"w-4 h-4 mr-2 text-green-500\" />\n                  Recently Completed ({stats.completedActions})\n                </h4>\n                <div className=\"space-y-3\">\n                  {completedActions.length === 0 ? (\n                    <div className=\"text-center py-6 text-muted-foreground\">\n                      <Square className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                      <p className=\"text-sm\">No completed actions yet</p>\n                    </div>\n                  ) : (\n                    completedActions.slice(0, 5).map((action: CalendarAction) => (\n                      <div\n                        key={action.id}\n                        className=\"flex items-start space-x-3 p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg opacity-75\"\n                        data-testid={`dashboard-completed-action-${action.id}`}\n                      >\n                        <CheckSquare className=\"w-4 h-4 mt-0.5 text-green-600\" />\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"font-medium text-green-800 dark:text-green-200 line-through truncate\">{action.title}</p>\n                          <div className=\"flex items-center space-x-3 mt-1 text-xs text-green-600 dark:text-green-400\">\n                            <span className=\"flex items-center\">\n                              <Clock className=\"w-3 h-3 mr-1\" />\n                              Completed {action.completedDate ? format(new Date(action.completedDate), 'MMM d') : 'recently'}\n                            </span>\n                            {action.assignedToName && (\n                              <span className=\"flex items-center\">\n                                <User className=\"w-3 h-3 mr-1\" />\n                                {action.assignedToName}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                  {completedActions.length > 5 && (\n                    <div className=\"text-center\">\n                      <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-completed-actions\">\n                        View {completedActions.length - 5} more\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Focus Songs and Recent Tasks */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        <Card data-testid=\"card-active-focus-songs\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-semibold\">Active Focus Songs</h3>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                data-testid=\"button-view-all-songs\"\n                onClick={() => setLocation('/focus-songs')}\n              >\n                View All\n              </Button>\n            </div>\n\n            {songsLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"h-16 bg-muted animate-pulse rounded-lg\"></div>\n                ))}\n              </div>\n            ) : !Array.isArray(focusSongs) || focusSongs.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Music className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No active focus songs</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {Array.isArray(focusSongs) && focusSongs.slice(0, 3).map((song: any) => (\n                  <div key={song.id} className=\"flex items-center justify-between p-4 border border-border rounded-lg\" data-testid={`song-card-${song.id}`}>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 bg-secondary rounded-lg flex items-center justify-center\">\n                        <Music className=\"w-6 h-6 text-secondary-foreground\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium\" data-testid={`song-title-${song.id}`}>{song.title}</h4>\n                        <p className=\"text-sm text-muted-foreground\" data-testid={`song-artist-${song.id}`}>{song.artist}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`px-2 py-1 text-xs rounded-full ${\n                        song.status === 'active' ? 'bg-blue-100 text-blue-700' :\n                        song.status === 'promoted' ? 'bg-green-100 text-green-700' :\n                        'bg-yellow-100 text-yellow-700'\n                      }`} data-testid={`song-status-${song.id}`}>\n                        {song.status}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-recent-tasks\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-semibold\">Recent Tasks</h3>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                data-testid=\"button-view-all-tasks\"\n                onClick={() => setLocation('/tasks')}\n              >\n                View All\n              </Button>\n            </div>\n\n            {tasksLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"h-20 bg-muted animate-pulse rounded-lg\"></div>\n                ))}\n              </div>\n            ) : !Array.isArray(pendingTasks) || pendingTasks.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <CheckCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No pending tasks</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {Array.isArray(pendingTasks) && pendingTasks.slice(0, 3).map((task: any) => (\n                  <div key={task.id} className=\"flex items-start space-x-4 p-4 border border-border rounded-lg\" data-testid={`task-item-${task.id}`}>\n                    <div className=\"w-5 h-5 border-2 border-gray-300 rounded mt-0.5\"></div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium\" data-testid={`task-title-${task.id}`}>{task.title}</h4>\n                      <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`task-assignee-${task.id}`}>\n                        Assigned to {task.assignedToName || 'Unassigned'}\n                      </p>\n                      <div className=\"flex items-center mt-2 space-x-4\">\n                        {task.deadline && (\n                          <span className=\"text-xs text-muted-foreground\" data-testid={`task-deadline-${task.id}`}>\n                            Due: {format(new Date(task.deadline), 'MMM d')}\n                          </span>\n                        )}\n                        <span className={`px-2 py-1 text-xs rounded-full status-${task.status}`} data-testid={`task-status-${task.id}`}>\n                          {task.status.replace('_', ' ')}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Team Overview */}\n      <Card data-testid=\"card-team-overview\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold\">Team Overview</h3>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              data-testid=\"button-manage-team\"\n              onClick={() => setLocation('/team')}\n            >\n              Manage Team\n            </Button>\n          </div>\n\n          {teamLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-muted animate-pulse rounded-lg\"></div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {/* Marketing Department */}\n              <div className=\"space-y-4\" data-testid=\"department-marketing-overview\">\n                <h4 className=\"font-medium text-sm text-muted-foreground uppercase tracking-wide\">Marketing</h4>\n                <div className=\"space-y-3\">\n                  {Array.isArray(teamMembers) && teamMembers.filter((member: any) => member.department === 'marketing').slice(0, 5).map((member: any) => (\n                    <div key={member.id} className=\"flex items-center space-x-3\" data-testid={`team-member-${member.id}`}>\n                      <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                        <span>{member.name.split(' ').map((n: string) => n[0]).join('')}</span>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium\">{member.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{member.jobTitle}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Digital Department */}\n              <div className=\"space-y-4\" data-testid=\"department-digital-overview\">\n                <h4 className=\"font-medium text-sm text-muted-foreground uppercase tracking-wide\">Digital</h4>\n                <div className=\"space-y-3\">\n                  {Array.isArray(teamMembers) && teamMembers.filter((member: any) => member.department === 'digital').slice(0, 5).map((member: any) => (\n                    <div key={member.id} className=\"flex items-center space-x-3\" data-testid={`team-member-${member.id}`}>\n                      <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                        <span>{member.name.split(' ').map((n: string) => n[0]).join('')}</span>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium\">{member.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{member.jobTitle}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* A&R & International Department */}\n              <div className=\"space-y-4\" data-testid=\"department-ar-overview\">\n                <h4 className=\"font-medium text-sm text-muted-foreground uppercase tracking-wide\">A&R & International</h4>\n                <div className=\"space-y-3\">\n                  {Array.isArray(teamMembers) && teamMembers.filter((member: any) => member.department === 'ar_international').slice(0, 5).map((member: any) => (\n                    <div key={member.id} className=\"flex items-center space-x-3\" data-testid={`team-member-${member.id}`}>\n                      <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                        <span>{member.name.split(' ').map((n: string) => n[0]).join('')}</span>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium\">{member.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{member.jobTitle}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <NewMeetingDialog open={isNewMeetingOpen} onOpenChange={setIsNewMeetingOpen} />\n      <EditMeetingDialog \n        open={isEditMeetingOpen} \n        onOpenChange={setIsEditMeetingOpen}\n        meeting={selectedMeeting}\n        meetingId={selectedMeetingId}\n      />\n    </div>\n  );\n}\n","size_bytes":28398},"client/src/pages/focus-songs.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Music, Youtube, Users, Radio, ListMusic, MoreVertical, TrendingUp, Calendar, Edit, Trash2, BarChart3, Search, Filter, Eye, ArrowUpRight, ArrowDownRight, ExternalLink } from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, BarChart, Bar } from \"recharts\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useForm } from \"react-hook-form\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { FocusSong, TeamMember, DailyMetrics } from \"@shared/schema\";\n\nexport default function FocusSongs() {\n  const [isNewSongOpen, setIsNewSongOpen] = useState(false);\n  const [isMetricsOpen, setIsMetricsOpen] = useState(false);\n  const [isEditSongOpen, setIsEditSongOpen] = useState(false);\n  const [isDetailViewOpen, setIsDetailViewOpen] = useState(false);\n  const [selectedSongId, setSelectedSongId] = useState<string | null>(null);\n  const [selectedSong, setSelectedSong] = useState<FocusSong | null>(null);\n  const [activeTab, setActiveTab] = useState<\"active_focus\" | \"back_catalog\">(\"active_focus\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dateFilter, setDateFilter] = useState(\"\");\n  const { toast } = useToast();\n\n  // Fetch focus songs\n  const { data: allFocusSongs, isLoading: songsLoading } = useQuery<FocusSong[]>({\n    queryKey: ['/api/focus-songs'],\n  });\n\n  // Filter songs by category\n  const activeFocusSongs = allFocusSongs?.filter((song) => song.category === 'active_focus') || [];\n  const backCatalogSongs = allFocusSongs?.filter((song) => song.category === 'back_catalog') || [];\n  const activeLoading = songsLoading;\n  const backCatalogLoading = songsLoading;\n\n  // Fetch team members for assignment\n  const { data: teamMembers } = useQuery<TeamMember[]>({\n    queryKey: ['/api/team-members'],\n  });\n\n  // Fetch daily metrics for selected song\n  const { data: dailyMetrics } = useQuery<DailyMetrics[]>({\n    queryKey: ['/api/daily-metrics', selectedSongId],\n    enabled: !!selectedSongId,\n  });\n\n  // Filter daily metrics by date if date filter is applied (after dailyMetrics is declared)\n  const filteredDailyMetrics = dailyMetrics?.filter((metric) => {\n    if (!dateFilter) return true;\n    return metric.date === dateFilter;\n  }) || [];\n\n  const form = useForm({\n    defaultValues: {\n      title: '',\n      artist: '',\n      status: 'active',\n      category: 'active_focus',\n      releaseDate: '',\n      youtubeProgress: '',\n      socialMediaProgress: '',\n      spotifyProgress: '',\n      radioProgress: '',\n      pressProgress: '',\n      youtubeResponsible: '',\n      socialMediaResponsible: '',\n      spotifyResponsible: '',\n      radioResponsible: '',\n      pressResponsible: '',\n      notes: '',\n    }\n  });\n\n  const metricsForm = useForm({\n    defaultValues: {\n      date: new Date().toISOString().split('T')[0],\n      channel: 'youtube',\n      youtubeViews: '',\n      youtubeAdViews: '',\n      youtubeAvgTime: '',\n      spotifyStreams: '',\n      spotifyPlaylistEntries: '',\n      instagramViews: '',\n      tiktokViews: '',\n      tiktokVideosPerSound: '',\n      // Enhanced Social Media Tracking\n      tiktokPostLink: '',\n      tiktokPostViews: '',\n      tiktokPostShares: '',\n      tiktokPostLikes: '',\n      tiktokPostSaves: '',\n      instagramPostLink: '',\n      instagramPostViews: '',\n      instagramPostLikes: '',\n      instagramVideosUsingSound: '',\n      tiktokVideosUsingSound: '',\n      pressReleasePickups: '',\n      radioStationsPlaying: '',\n      radioTotalPlays: '',\n      notes: '',\n    }\n  });\n\n  const createSongMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest('POST', '/api/focus-songs', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        predicate: (query) => Boolean(query.queryKey[0]?.toString().startsWith('/api/focus-songs'))\n      });\n      setIsNewSongOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Focus track added successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add focus track\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSongMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      await apiRequest('PATCH', `/api/focus-songs/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        predicate: (query) => Boolean(query.queryKey[0]?.toString().startsWith('/api/focus-songs'))\n      });\n      setIsEditSongOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Focus track updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update focus track\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSongMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('DELETE', `/api/focus-songs/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        predicate: (query) => Boolean(query.queryKey[0]?.toString().startsWith('/api/focus-songs'))\n      });\n      toast({\n        title: \"Success\",\n        description: \"Focus track deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete focus track\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createMetricsMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest('POST', '/api/daily-metrics', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/daily-metrics', selectedSongId] });\n      setIsMetricsOpen(false);\n      metricsForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Daily metrics recorded successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record metrics\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createSongMutation.mutate(data);\n  };\n\n  const onMetricsSubmit = (data: any) => {\n    createMetricsMutation.mutate({\n      ...data,\n      focusSongId: selectedSongId,\n    });\n  };\n\n  const handleEditSong = (song: FocusSong) => {\n    // Convert nullable fields to strings for form\n    form.reset({\n      title: song.title || '',\n      artist: song.artist || '',\n      status: song.status || 'active',\n      category: song.category || 'active_focus',\n      releaseDate: song.releaseDate || '',\n      youtubeProgress: song.youtubeProgress || '',\n      socialMediaProgress: song.socialMediaProgress || '',\n      spotifyProgress: song.spotifyProgress || '',\n      radioProgress: song.radioProgress || '',\n      pressProgress: song.pressProgress || '',\n      youtubeResponsible: song.youtubeResponsible || '',\n      socialMediaResponsible: song.socialMediaResponsible || '',\n      spotifyResponsible: song.spotifyResponsible || '',\n      radioResponsible: song.radioResponsible || '',\n      pressResponsible: song.pressResponsible || '',\n      notes: song.notes || '',\n    });\n    setSelectedSongId(song.id);\n    setIsEditSongOpen(true);\n  };\n\n  const onEditSubmit = (data: any) => {\n    if (selectedSongId) {\n      updateSongMutation.mutate({ id: selectedSongId, data });\n    }\n  };\n\n  const handleDeleteSong = (id: string) => {\n    if (confirm('Are you sure you want to delete this focus track?')) {\n      deleteSongMutation.mutate(id);\n    }\n  };\n\n  const handleViewMetrics = (songId: string) => {\n    setSelectedSongId(songId);\n    setIsMetricsOpen(true);\n  };\n\n  const handleViewDetails = (song: FocusSong) => {\n    setSelectedSong(song);\n    setSelectedSongId(song.id);\n    setIsDetailViewOpen(true);\n  };\n\n  const currentSongs = activeTab === \"active_focus\" ? activeFocusSongs : backCatalogSongs;\n  const isLoading = activeTab === \"active_focus\" ? activeLoading : backCatalogLoading;\n\n  const filteredSongs = currentSongs?.filter((song) => {\n    const matchesSearch = !searchTerm || \n      song.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      song.artist?.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  }) || [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-500';\n      case 'promoted': return 'bg-blue-500';\n      case 'planning': return 'bg-yellow-500';\n      case 'paused': return 'bg-gray-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  // Robust numeric parsing function to handle comma-separated values\n  const toNum = (value: any) => Number(String(value ?? '').replace(/[,\\s]/g, '')) || 0;\n\n  // Helper function to format numbers for display\n  const formatNumber = (value: any) => {\n    if (!value || value === '' || value === null || value === undefined) return '-';\n    const num = toNum(value);\n    if (num === 0) return '-';\n    return num.toLocaleString();\n  };\n\n  // Helper function to render clickable social media links\n  const renderSocialLink = (url: string, fallback: string = '-') => {\n    if (!url || url === '' || url === null || url === undefined) return fallback;\n    return (\n      <a \n        href={url} \n        target=\"_blank\" \n        rel=\"noopener noreferrer\" \n        className=\"inline-flex items-center gap-1 text-blue-600 hover:text-blue-800 hover:underline\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        View Post\n        <ExternalLink className=\"h-3 w-3\" />\n      </a>\n    );\n  };\n\n  // Chart data preparation - use filtered metrics if date filter is applied\n  const metricsToUse = dateFilter ? filteredDailyMetrics : dailyMetrics;\n  const chartData = metricsToUse?.map((metric: any, index: number) => ({\n    date: metric.date,\n    youtubeViews: toNum(metric.youtubeViews),\n    spotifyStreams: toNum(metric.spotifyStreams),\n    instagramViews: toNum(metric.instagramViews),\n    tiktokViews: toNum(metric.tiktokViews),\n  })) || [];\n\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];\n\n  // Helper functions for calculating channel metrics\n  const getLatestMetrics = () => {\n    const metricsData = metricsToUse || [];\n    if (!metricsData || metricsData.length === 0) return null;\n    const latest = metricsData[metricsData.length - 1];\n    const previous = metricsData.length > 1 ? metricsData[metricsData.length - 2] : null;\n    \n    return {\n      latest,\n      previous,\n      youtube: {\n        current: toNum(latest.youtubeViews),\n        previous: previous ? toNum(previous.youtubeViews) : 0,\n        growth: previous ? ((toNum(latest.youtubeViews) - toNum(previous.youtubeViews)) / Math.max(toNum(previous.youtubeViews), 1)) * 100 : 0\n      },\n      spotify: {\n        current: toNum(latest.spotifyStreams),\n        previous: previous ? toNum(previous.spotifyStreams) : 0,\n        growth: previous ? ((toNum(latest.spotifyStreams) - toNum(previous.spotifyStreams)) / Math.max(toNum(previous.spotifyStreams), 1)) * 100 : 0\n      },\n      socialMedia: {\n        currentTikTok: toNum(latest.tiktokViews),\n        currentInstagram: toNum(latest.instagramViews),\n        totalCurrent: toNum(latest.tiktokViews) + toNum(latest.instagramViews),\n        totalPrevious: previous ? toNum(previous.tiktokViews) + toNum(previous.instagramViews) : 0,\n        growth: previous ? (((toNum(latest.tiktokViews) + toNum(latest.instagramViews)) - (toNum(previous.tiktokViews) + toNum(previous.instagramViews))) / Math.max((toNum(previous.tiktokViews) + toNum(previous.instagramViews)), 1)) * 100 : 0,\n        engagementRate: (toNum(latest.tiktokPostLikes) + toNum(latest.instagramPostLikes)) / Math.max((toNum(latest.tiktokViews) + toNum(latest.instagramViews)), 1) * 100\n      },\n      radio: {\n        currentStations: toNum(latest.radioStationsPlaying),\n        currentPlays: toNum(latest.radioTotalPlays),\n        previousStations: previous ? toNum(previous.radioStationsPlaying) : 0,\n        previousPlays: previous ? toNum(previous.radioTotalPlays) : 0,\n        stationsGrowth: previous ? ((toNum(latest.radioStationsPlaying) - toNum(previous.radioStationsPlaying)) / Math.max(toNum(previous.radioStationsPlaying), 1)) * 100 : 0,\n        playsGrowth: previous ? ((toNum(latest.radioTotalPlays) - toNum(previous.radioTotalPlays)) / Math.max(toNum(previous.radioTotalPlays), 1)) * 100 : 0\n      }\n    };\n  };\n\n  const renderTrendIndicator = (growth: number) => {\n    if (growth === 0) return null;\n    const isPositive = growth > 0;\n    const color = isPositive ? 'text-green-600' : 'text-red-600';\n    const Icon = isPositive ? ArrowUpRight : ArrowDownRight;\n    \n    return (\n      <div className={`inline-flex items-center gap-1 ${color} text-xs font-medium`}>\n        <Icon className=\"h-3 w-3\" />\n        {Math.abs(growth).toFixed(1)}%\n      </div>\n    );\n  };\n\n  const metrics = getLatestMetrics();\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Focus Tracks</h1>\n          <p className=\"text-muted-foreground\">Track and manage song performance across all channels</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {/* Search and Filter */}\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search songs or artists...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 w-64\"\n                data-testid=\"input-search-songs\"\n              />\n            </div>\n            <div className=\"relative\">\n              <Input\n                type=\"date\"\n                placeholder=\"Filter by date\"\n                value={dateFilter}\n                onChange={(e) => setDateFilter(e.target.value)}\n                className=\"w-40\"\n                data-testid=\"input-date-filter\"\n              />\n            </div>\n          </div>\n          <Dialog open={isNewSongOpen} onOpenChange={setIsNewSongOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-focus-track\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Focus Track\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[85vh] flex flex-col\">\n              <DialogHeader className=\"flex-shrink-0\">\n                <DialogTitle>Add New Focus Track</DialogTitle>\n              </DialogHeader>\n              <div className=\"flex-1 overflow-y-auto pr-2\">\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Song Title</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-song-title\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"artist\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Artist</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-artist\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-category\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"active_focus\">Active Focus Song</SelectItem>\n                              <SelectItem value=\"back_catalog\">Back Catalog</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"status\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Status</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-status\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"active\">Active</SelectItem>\n                              <SelectItem value=\"promoted\">Promoted</SelectItem>\n                              <SelectItem value=\"planning\">Planning</SelectItem>\n                              <SelectItem value=\"paused\">Paused</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"releaseDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Release Date</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} data-testid=\"input-release-date\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Channel Progress and Responsibilities */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium\">Channel Progress & Responsibilities</h4>\n                    \n                    {/* YouTube */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"youtubeProgress\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Youtube className=\"h-4 w-4\" />\n                              YouTube Progress\n                            </FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Current YouTube status and metrics\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"youtubeResponsible\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>YouTube Responsible</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select team member\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {teamMembers?.map((member: any) => (\n                                  <SelectItem key={member.id} value={member.name}>\n                                    {member.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Spotify */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"spotifyProgress\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <ListMusic className=\"h-4 w-4\" />\n                              Spotify Progress\n                            </FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Current Spotify status and metrics\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"spotifyResponsible\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Spotify Responsible</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select team member\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {teamMembers?.map((member: any) => (\n                                  <SelectItem key={member.id} value={member.name}>\n                                    {member.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Social Media */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"socialMediaProgress\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Users className=\"h-4 w-4\" />\n                              Social Media Progress\n                            </FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Current social media status and metrics\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"socialMediaResponsible\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Social Media Responsible</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select team member\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {teamMembers?.map((member: any) => (\n                                  <SelectItem key={member.id} value={member.name}>\n                                    {member.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Radio */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"radioProgress\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Radio className=\"h-4 w-4\" />\n                              Radio Progress\n                            </FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Current radio status and metrics\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"radioResponsible\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Radio Responsible</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select team member\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {teamMembers?.map((member: any) => (\n                                  <SelectItem key={member.id} value={member.name}>\n                                    {member.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Additional notes and strategy details\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-2 pt-4 border-t bg-background sticky bottom-0\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsNewSongOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createSongMutation.isPending}\n                      data-testid=\"button-create-song\"\n                    >\n                      {createSongMutation.isPending ? 'Creating...' : 'Add Focus Track'}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Tabs for Active Focus vs Back Catalog */}\n      <Tabs value={activeTab} onValueChange={(value: any) => setActiveTab(value)}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"active_focus\" data-testid=\"tab-active-focus\">\n            Active Focus Songs\n          </TabsTrigger>\n          <TabsTrigger value=\"back_catalog\" data-testid=\"tab-back-catalog\">\n            Back Catalog\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"active_focus\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {isLoading ? (\n              <div className=\"col-span-full text-center py-8\">Loading...</div>\n            ) : !Array.isArray(filteredSongs) || filteredSongs.length === 0 ? (\n              <div className=\"col-span-full text-center py-8\">\n                <Music className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">\n                  {searchTerm ? `No tracks found matching \"${searchTerm}\"` : \"No active focus tracks yet\"}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {searchTerm ? \"Try adjusting your search terms\" : \"Add your first track to get started\"}\n                </p>\n              </div>\n            ) : (\n              filteredSongs.map((song: any) => (\n                <Card key={song.id} className=\"relative cursor-pointer hover:shadow-lg transition-shadow\" data-testid={`song-card-${song.id}`} onClick={() => handleViewDetails(song)}>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\">{song.title}</CardTitle>\n                        <p className=\"text-sm text-muted-foreground\">{song.artist}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={`${getStatusColor(song.status)} text-white`}>\n                          {song.status}\n                        </Badge>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`menu-song-${song.id}`} onClick={(e) => e.stopPropagation()}>\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={(e) => { e.stopPropagation(); handleViewDetails(song); }}>\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              View Details\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={(e) => { e.stopPropagation(); handleEditSong(song); }}>\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit Track\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={(e) => { e.stopPropagation(); handleViewMetrics(song.id); }}>\n                              <BarChart3 className=\"h-4 w-4 mr-2\" />\n                              Add Daily Metrics\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={(e) => { e.stopPropagation(); handleDeleteSong(song.id); }}\n                              className=\"text-red-600\"\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete Track\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {/* Channel Progress Indicators */}\n                    <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                      <div className=\"flex items-center gap-1\">\n                        <Youtube className=\"h-3 w-3 text-red-500\" />\n                        <span className=\"truncate\">{song.youtubeProgress || 'Not started'}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <ListMusic className=\"h-3 w-3 text-green-500\" />\n                        <span className=\"truncate\">{song.spotifyProgress || 'Not started'}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Users className=\"h-3 w-3 text-blue-500\" />\n                        <span className=\"truncate\">{song.socialMediaProgress || 'Not started'}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Radio className=\"h-3 w-3 text-purple-500\" />\n                        <span className=\"truncate\">{song.radioProgress || 'Not started'}</span>\n                      </div>\n                    </div>\n\n                    {song.notes && (\n                      <div className=\"pt-2 border-t\">\n                        <p className=\"text-xs text-muted-foreground\">{song.notes}</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"back_catalog\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {isLoading ? (\n              <div className=\"col-span-full text-center py-8\">Loading...</div>\n            ) : !Array.isArray(filteredSongs) || filteredSongs.length === 0 ? (\n              <div className=\"col-span-full text-center py-8\">\n                <Music className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">\n                  {searchTerm ? `No tracks found matching \"${searchTerm}\"` : \"No back catalog tracks yet\"}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {searchTerm ? \"Try adjusting your search terms\" : \"Add tracks to your back catalog\"}\n                </p>\n              </div>\n            ) : (\n              filteredSongs.map((song: any) => (\n                <Card key={song.id} className=\"relative cursor-pointer hover:shadow-lg transition-shadow\" data-testid={`song-card-${song.id}`} onClick={() => handleViewDetails(song)}>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\">{song.title}</CardTitle>\n                        <p className=\"text-sm text-muted-foreground\">{song.artist}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={`${getStatusColor(song.status)} text-white`}>\n                          {song.status}\n                        </Badge>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`menu-song-${song.id}`} onClick={(e) => e.stopPropagation()}>\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={(e) => { e.stopPropagation(); handleViewDetails(song); }}>\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              View Details\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={(e) => { e.stopPropagation(); handleEditSong(song); }}>\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit Track\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={(e) => { e.stopPropagation(); handleViewMetrics(song.id); }}>\n                              <BarChart3 className=\"h-4 w-4 mr-2\" />\n                              Add Daily Metrics\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={(e) => { e.stopPropagation(); handleDeleteSong(song.id); }}\n                              className=\"text-red-600\"\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete Track\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {/* Same content structure as active focus songs */}\n                    <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                      <div className=\"flex items-center gap-1\">\n                        <Youtube className=\"h-3 w-3 text-red-500\" />\n                        <span className=\"truncate\">{song.youtubeProgress || 'Not started'}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <ListMusic className=\"h-3 w-3 text-green-500\" />\n                        <span className=\"truncate\">{song.spotifyProgress || 'Not started'}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Users className=\"h-3 w-3 text-blue-500\" />\n                        <span className=\"truncate\">{song.socialMediaProgress || 'Not started'}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Radio className=\"h-3 w-3 text-purple-500\" />\n                        <span className=\"truncate\">{song.radioProgress || 'Not started'}</span>\n                      </div>\n                    </div>\n\n                    {song.notes && (\n                      <div className=\"pt-2 border-t\">\n                        <p className=\"text-xs text-muted-foreground\">{song.notes}</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Detailed Song View Dialog */}\n      <Dialog open={isDetailViewOpen} onOpenChange={setIsDetailViewOpen}>\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Music className=\"h-5 w-5\" />\n              <span>{selectedSong?.title} by {selectedSong?.artist}</span>\n              <Badge className={`${getStatusColor(selectedSong?.status || 'active')} text-white ml-2`}>\n                {selectedSong?.status || 'active'}\n              </Badge>\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedSong && (\n            <div className=\"space-y-6\">\n              {/* Song Info and Quick Actions */}\n              <div className=\"flex justify-between items-start\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">Release Date: {selectedSong.releaseDate}</p>\n                  <p className=\"text-sm text-muted-foreground\">Category: {selectedSong.category === 'active_focus' ? 'Active Focus Song' : 'Back Catalog'}</p>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => handleEditSong(selectedSong)}>\n                    <Edit className=\"h-4 w-4 mr-2\" />\n                    Edit Track\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => handleViewMetrics(selectedSong.id)}>\n                    <BarChart3 className=\"h-4 w-4 mr-2\" />\n                    Add Metrics\n                  </Button>\n                </div>\n              </div>\n\n              {/* Performance Charts */}\n              {chartData.length > 0 ? (\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Line Chart - Trends over time */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <TrendingUp className=\"h-4 w-4\" />\n                        <span>Performance Trends</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <LineChart data={chartData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"date\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Line type=\"monotone\" dataKey=\"youtubeViews\" stroke=\"#FF0000\" name=\"YouTube Views\" />\n                          <Line type=\"monotone\" dataKey=\"spotifyStreams\" stroke=\"#1DB954\" name=\"Spotify Streams\" />\n                          <Line type=\"monotone\" dataKey=\"instagramViews\" stroke=\"#E4405F\" name=\"Instagram Views\" />\n                          <Line type=\"monotone\" dataKey=\"tiktokViews\" stroke=\"#000000\" name=\"TikTok Views\" />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n\n                  {/* Bar Chart - Latest metrics comparison */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Latest Performance Snapshot</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <BarChart data={chartData.slice(-1)}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"date\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"youtubeViews\" fill=\"#FF0000\" name=\"YouTube Views\" />\n                          <Bar dataKey=\"spotifyStreams\" fill=\"#1DB954\" name=\"Spotify Streams\" />\n                          <Bar dataKey=\"instagramViews\" fill=\"#E4405F\" name=\"Instagram Views\" />\n                          <Bar dataKey=\"tiktokViews\" fill=\"#000000\" name=\"TikTok Views\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n                </div>\n              ) : (\n                <Card>\n                  <CardContent className=\"text-center py-8\">\n                    <BarChart3 className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">No performance data yet</p>\n                    <p className=\"text-sm text-muted-foreground\">Add daily metrics to see performance trends</p>\n                    <Button className=\"mt-4\" onClick={() => handleViewMetrics(selectedSong.id)}>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add First Metrics\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Channel Progress Details */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Channel Progress & Responsibilities</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-4\">\n                      {/* YouTube Section */}\n                      <div className=\"flex items-start space-x-3\">\n                        <Youtube className=\"h-5 w-5 text-red-500 mt-1\" />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <h4 className=\"font-medium\">YouTube</h4>\n                            {metrics && renderTrendIndicator(metrics.youtube.growth)}\n                          </div>\n                          {metrics ? (\n                            <div className=\"space-y-1\">\n                              <p className=\"text-sm text-muted-foreground\">\n                                <span className=\"font-medium text-foreground\">\n                                  {formatNumber(metrics.youtube.current)} views\n                                </span>\n                                {metrics.youtube.previous > 0 && (\n                                  <span className=\"text-xs ml-2\">\n                                    (prev: {formatNumber(metrics.youtube.previous)})\n                                  </span>\n                                )}\n                              </p>\n                              {selectedSong.youtubeProgress && (\n                                <p className=\"text-xs text-muted-foreground italic\">\n                                  {selectedSong.youtubeProgress}\n                                </p>\n                              )}\n                            </div>\n                          ) : (\n                            <p className=\"text-sm text-muted-foreground\">\n                              {selectedSong.youtubeProgress || 'No data yet'}\n                            </p>\n                          )}\n                          {selectedSong.youtubeResponsible && (\n                            <Badge variant=\"outline\" className=\"mt-1\">{selectedSong.youtubeResponsible}</Badge>\n                          )}\n                        </div>\n                      </div>\n                      \n                      {/* Spotify Section */}\n                      <div className=\"flex items-start space-x-3\">\n                        <ListMusic className=\"h-5 w-5 text-green-500 mt-1\" />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <h4 className=\"font-medium\">Spotify</h4>\n                            {metrics && renderTrendIndicator(metrics.spotify.growth)}\n                          </div>\n                          {metrics ? (\n                            <div className=\"space-y-1\">\n                              <p className=\"text-sm text-muted-foreground\">\n                                <span className=\"font-medium text-foreground\">\n                                  {formatNumber(metrics.spotify.current)} streams\n                                </span>\n                                {metrics.spotify.previous > 0 && (\n                                  <span className=\"text-xs ml-2\">\n                                    (prev: {formatNumber(metrics.spotify.previous)})\n                                  </span>\n                                )}\n                              </p>\n                              {selectedSong.spotifyProgress && (\n                                <p className=\"text-xs text-muted-foreground italic\">\n                                  {selectedSong.spotifyProgress}\n                                </p>\n                              )}\n                            </div>\n                          ) : (\n                            <p className=\"text-sm text-muted-foreground\">\n                              {selectedSong.spotifyProgress || 'No data yet'}\n                            </p>\n                          )}\n                          {selectedSong.spotifyResponsible && (\n                            <Badge variant=\"outline\" className=\"mt-1\">{selectedSong.spotifyResponsible}</Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      {/* Social Media Section */}\n                      <div className=\"flex items-start space-x-3\">\n                        <Users className=\"h-5 w-5 text-blue-500 mt-1\" />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <h4 className=\"font-medium\">Social Media</h4>\n                            {metrics && renderTrendIndicator(metrics.socialMedia.growth)}\n                          </div>\n                          {metrics ? (\n                            <div className=\"space-y-1\">\n                              <p className=\"text-sm text-muted-foreground\">\n                                <span className=\"font-medium text-foreground\">\n                                  {formatNumber(metrics.socialMedia.totalCurrent)} total views\n                                </span>\n                                {metrics.socialMedia.totalPrevious > 0 && (\n                                  <span className=\"text-xs ml-2\">\n                                    (prev: {formatNumber(metrics.socialMedia.totalPrevious)})\n                                  </span>\n                                )}\n                              </p>\n                              <div className=\"flex gap-4 text-xs text-muted-foreground\">\n                                <span>TikTok: {formatNumber(metrics.socialMedia.currentTikTok)}</span>\n                                <span>Instagram: {formatNumber(metrics.socialMedia.currentInstagram)}</span>\n                              </div>\n                              {metrics.socialMedia.engagementRate > 0 && (\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Engagement: {metrics.socialMedia.engagementRate.toFixed(2)}%\n                                </p>\n                              )}\n                              {selectedSong.socialMediaProgress && (\n                                <p className=\"text-xs text-muted-foreground italic\">\n                                  {selectedSong.socialMediaProgress}\n                                </p>\n                              )}\n                            </div>\n                          ) : (\n                            <p className=\"text-sm text-muted-foreground\">\n                              {selectedSong.socialMediaProgress || 'No data yet'}\n                            </p>\n                          )}\n                          {selectedSong.socialMediaResponsible && (\n                            <Badge variant=\"outline\" className=\"mt-1\">{selectedSong.socialMediaResponsible}</Badge>\n                          )}\n                        </div>\n                      </div>\n                      \n                      {/* Radio Section */}\n                      <div className=\"flex items-start space-x-3\">\n                        <Radio className=\"h-5 w-5 text-purple-500 mt-1\" />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <h4 className=\"font-medium\">Radio</h4>\n                            {metrics && renderTrendIndicator(Math.max(metrics.radio.stationsGrowth, metrics.radio.playsGrowth))}\n                          </div>\n                          {metrics && (metrics.radio.currentStations > 0 || metrics.radio.currentPlays > 0) ? (\n                            <div className=\"space-y-1\">\n                              <div className=\"flex gap-4 text-sm text-muted-foreground\">\n                                {metrics.radio.currentStations > 0 && (\n                                  <span className=\"font-medium text-foreground\">\n                                    {formatNumber(metrics.radio.currentStations)} stations\n                                  </span>\n                                )}\n                                {metrics.radio.currentPlays > 0 && (\n                                  <span className=\"font-medium text-foreground\">\n                                    {formatNumber(metrics.radio.currentPlays)} plays\n                                  </span>\n                                )}\n                              </div>\n                              {selectedSong.radioProgress && (\n                                <p className=\"text-xs text-muted-foreground italic\">\n                                  {selectedSong.radioProgress}\n                                </p>\n                              )}\n                            </div>\n                          ) : (\n                            <p className=\"text-sm text-muted-foreground\">\n                              {selectedSong.radioProgress || 'No data yet'}\n                            </p>\n                          )}\n                          {selectedSong.radioResponsible && (\n                            <Badge variant=\"outline\" className=\"mt-1\">{selectedSong.radioResponsible}</Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Enhanced Historical Metrics Table */}\n              {dailyMetrics && dailyMetrics.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Historical Metrics</CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">Comprehensive tracking across all channels and social media platforms</p>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full text-sm\">\n                        <thead>\n                          <tr className=\"border-b\">\n                            <th className=\"text-left p-3 font-semibold\">Date</th>\n                            <th className=\"text-left p-3 font-semibold\">YouTube Views</th>\n                            <th className=\"text-left p-3 font-semibold\">Spotify Streams</th>\n                            \n                            {/* TikTok Section */}\n                            <th className=\"text-left p-3 font-semibold bg-gray-50 dark:bg-gray-800\">TikTok Views</th>\n                            <th className=\"text-left p-3 font-semibold bg-gray-50 dark:bg-gray-800\">TikTok Post Link</th>\n                            <th className=\"text-left p-3 font-semibold bg-gray-50 dark:bg-gray-800\">TikTok Post Views</th>\n                            <th className=\"text-left p-3 font-semibold bg-gray-50 dark:bg-gray-800\">TikTok Post Shares</th>\n                            <th className=\"text-left p-3 font-semibold bg-gray-50 dark:bg-gray-800\">TikTok Post Likes</th>\n                            <th className=\"text-left p-3 font-semibold bg-gray-50 dark:bg-gray-800\">TikTok Post Saves</th>\n                            <th className=\"text-left p-3 font-semibold bg-gray-50 dark:bg-gray-800\">TikTok Videos Using Sound</th>\n                            \n                            {/* Instagram Section */}\n                            <th className=\"text-left p-3 font-semibold bg-blue-50 dark:bg-blue-900/20\">Instagram Views</th>\n                            <th className=\"text-left p-3 font-semibold bg-blue-50 dark:bg-blue-900/20\">Instagram Post Link</th>\n                            <th className=\"text-left p-3 font-semibold bg-blue-50 dark:bg-blue-900/20\">Instagram Post Views</th>\n                            <th className=\"text-left p-3 font-semibold bg-blue-50 dark:bg-blue-900/20\">Instagram Post Likes</th>\n                            <th className=\"text-left p-3 font-semibold bg-blue-50 dark:bg-blue-900/20\">Instagram Videos Using Sound</th>\n                            \n                            {/* Other Metrics */}\n                            <th className=\"text-left p-3 font-semibold\">Press Release Pickups</th>\n                            <th className=\"text-left p-3 font-semibold\">Radio Stations Playing</th>\n                            <th className=\"text-left p-3 font-semibold\">Radio Total Plays</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {dailyMetrics.map((metric: any, index: number) => (\n                            <tr key={index} className=\"border-b hover:bg-gray-50 dark:hover:bg-gray-800/50\">\n                              <td className=\"p-3 font-medium\">{metric.date}</td>\n                              <td className=\"p-3\">{formatNumber(metric.youtubeViews)}</td>\n                              <td className=\"p-3\">{formatNumber(metric.spotifyStreams)}</td>\n                              \n                              {/* TikTok Section */}\n                              <td className=\"p-3 bg-gray-50 dark:bg-gray-800\">{formatNumber(metric.tiktokViews)}</td>\n                              <td className=\"p-3 bg-gray-50 dark:bg-gray-800\">{renderSocialLink(metric.tiktokPostLink)}</td>\n                              <td className=\"p-3 bg-gray-50 dark:bg-gray-800\">{formatNumber(metric.tiktokPostViews)}</td>\n                              <td className=\"p-3 bg-gray-50 dark:bg-gray-800\">{formatNumber(metric.tiktokPostShares)}</td>\n                              <td className=\"p-3 bg-gray-50 dark:bg-gray-800\">{formatNumber(metric.tiktokPostLikes)}</td>\n                              <td className=\"p-3 bg-gray-50 dark:bg-gray-800\">{formatNumber(metric.tiktokPostSaves)}</td>\n                              <td className=\"p-3 bg-gray-50 dark:bg-gray-800\">{formatNumber(metric.tiktokVideosUsingSound)}</td>\n                              \n                              {/* Instagram Section */}\n                              <td className=\"p-3 bg-blue-50 dark:bg-blue-900/20\">{formatNumber(metric.instagramViews)}</td>\n                              <td className=\"p-3 bg-blue-50 dark:bg-blue-900/20\">{renderSocialLink(metric.instagramPostLink)}</td>\n                              <td className=\"p-3 bg-blue-50 dark:bg-blue-900/20\">{formatNumber(metric.instagramPostViews)}</td>\n                              <td className=\"p-3 bg-blue-50 dark:bg-blue-900/20\">{formatNumber(metric.instagramPostLikes)}</td>\n                              <td className=\"p-3 bg-blue-50 dark:bg-blue-900/20\">{formatNumber(metric.instagramVideosUsingSound)}</td>\n                              \n                              {/* Other Metrics */}\n                              <td className=\"p-3\">{formatNumber(metric.pressReleasePickups)}</td>\n                              <td className=\"p-3\">{formatNumber(metric.radioStationsPlaying)}</td>\n                              <td className=\"p-3\">{formatNumber(metric.radioTotalPlays)}</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {selectedSong.notes && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Notes</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">{selectedSong.notes}</p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Daily Metrics Dialog */}\n      <Dialog open={isMetricsOpen} onOpenChange={setIsMetricsOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Add Daily Metrics</DialogTitle>\n          </DialogHeader>\n          <Form {...metricsForm}>\n            <form onSubmit={metricsForm.handleSubmit(onMetricsSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={metricsForm.control}\n                  name=\"date\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={metricsForm.control}\n                  name=\"channel\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Channel</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"youtube\">YouTube</SelectItem>\n                          <SelectItem value=\"spotify\">Spotify</SelectItem>\n                          <SelectItem value=\"social_media\">Social Media</SelectItem>\n                          <SelectItem value=\"press\">Press</SelectItem>\n                          <SelectItem value=\"radio\">Radio</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* YouTube Metrics */}\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium flex items-center gap-2\">\n                  <Youtube className=\"h-4 w-4\" />\n                  YouTube Metrics\n                </h4>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={metricsForm.control}\n                    name=\"youtubeViews\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Total Views</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., 125,000\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={metricsForm.control}\n                    name=\"youtubeAdViews\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Views from Ads</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., 15,000\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={metricsForm.control}\n                    name=\"youtubeAvgTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Avg Watch Time</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., 2:45\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Spotify Metrics */}\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium flex items-center gap-2\">\n                  <ListMusic className=\"h-4 w-4\" />\n                  Spotify Metrics\n                </h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={metricsForm.control}\n                    name=\"spotifyStreams\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Streams</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., 50,000\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={metricsForm.control}\n                    name=\"spotifyPlaylistEntries\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Playlist Entries</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., 12\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Social Media Metrics */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium flex items-center gap-2\">\n                  <Users className=\"h-4 w-4\" />\n                  Enhanced Social Media Metrics\n                </h4>\n                \n                {/* TikTok Post Tracking */}\n                <div className=\"space-y-3\">\n                  <h5 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">TikTok Post Performance</h5>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"tiktokPostLink\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>TikTok Link</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"https://www.tiktok.com/@username/video/...\" data-testid=\"input-tiktok-link\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-4 gap-4\">\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"tiktokPostViews\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Views</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 1,200,000\" data-testid=\"input-tiktok-views\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"tiktokPostShares\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Shares</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 15,000\" data-testid=\"input-tiktok-shares\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"tiktokPostLikes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Likes</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 85,000\" data-testid=\"input-tiktok-likes\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"tiktokPostSaves\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Saves</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 8,500\" data-testid=\"input-tiktok-saves\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/* Instagram Post Tracking */}\n                <div className=\"space-y-3\">\n                  <h5 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Instagram Post Performance</h5>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"instagramPostLink\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Instagram Link</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"https://www.instagram.com/p/...\" data-testid=\"input-instagram-link\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"instagramPostViews\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Views</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 450,000\" data-testid=\"input-instagram-views\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"instagramPostLikes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Likes</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 25,000\" data-testid=\"input-instagram-likes\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/* User Generated Content Tracking */}\n                <div className=\"space-y-3\">\n                  <h5 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">User Generated Content</h5>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"instagramVideosUsingSound\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Instagram Videos Using Sound</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 250\" data-testid=\"input-instagram-ugc-count\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"tiktokVideosUsingSound\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>TikTok Videos Using Sound</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 1,500\" data-testid=\"input-tiktok-ugc-count\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/* Legacy Fields for Backward Compatibility */}\n                <div className=\"space-y-3\">\n                  <h5 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">General Social Media Metrics</h5>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"instagramViews\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Total Instagram Views</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 25,000\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"tiktokViews\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Total TikTok Views</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 100,000\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={metricsForm.control}\n                      name=\"tiktokVideosPerSound\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>TikTok Videos (Legacy)</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 150\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <FormField\n                control={metricsForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} placeholder=\"Additional insights and observations\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsMetricsOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMetricsMutation.isPending}\n                  data-testid=\"button-save-metrics\"\n                >\n                  {createMetricsMutation.isPending ? 'Saving...' : 'Save Metrics'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Song Dialog */}\n      <Dialog open={isEditSongOpen} onOpenChange={setIsEditSongOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Focus Track</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Song Title</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"artist\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Artist</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"active_focus\">Active Focus Song</SelectItem>\n                          <SelectItem value=\"back_catalog\">Back Catalog</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"active\">Active</SelectItem>\n                          <SelectItem value=\"promoted\">Promoted</SelectItem>\n                          <SelectItem value=\"planning\">Planning</SelectItem>\n                          <SelectItem value=\"paused\">Paused</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"releaseDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Release Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Channel Progress and Responsibilities */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium\">Channel Progress & Responsibilities</h4>\n                \n                {/* YouTube */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"youtubeProgress\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <Youtube className=\"h-4 w-4\" />\n                          YouTube Progress\n                        </FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Current YouTube status and metrics\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"youtubeResponsible\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>YouTube Responsible</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select team member\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {teamMembers?.map((member: any) => (\n                              <SelectItem key={member.id} value={member.name}>\n                                {member.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Spotify */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"spotifyProgress\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <ListMusic className=\"h-4 w-4\" />\n                          Spotify Progress\n                        </FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Current Spotify status and metrics\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"spotifyResponsible\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Spotify Responsible</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select team member\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {teamMembers?.map((member: any) => (\n                              <SelectItem key={member.id} value={member.name}>\n                                {member.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Social Media */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"socialMediaProgress\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <Users className=\"h-4 w-4\" />\n                          Social Media Progress\n                        </FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Current social media status and metrics\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"socialMediaResponsible\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Social Media Responsible</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select team member\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {teamMembers?.map((member: any) => (\n                              <SelectItem key={member.id} value={member.name}>\n                                {member.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Radio */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"radioProgress\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <Radio className=\"h-4 w-4\" />\n                          Radio Progress\n                        </FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Current radio status and metrics\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"radioResponsible\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Radio Responsible</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select team member\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {teamMembers?.map((member: any) => (\n                              <SelectItem key={member.id} value={member.name}>\n                                {member.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} placeholder=\"Additional notes and strategy details\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditSongOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={updateSongMutation.isPending}\n                  data-testid=\"button-update-song\"\n                >\n                  {updateSongMutation.isPending ? 'Updating...' : 'Update Track'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":88299},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Calendar, Music, Users, CheckCircle } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Music className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-foreground\">Roton Meetings</h1>\n                <p className=\"text-sm text-muted-foreground\">Team Management Platform</p>\n              </div>\n            </div>\n            <Button \n              onClick={handleLogin}\n              data-testid=\"button-login\"\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-6\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-6\">\n            Streamline Your Team Meetings\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Manage weekly meetings, track focus songs across all channels, and keep your team aligned with Roton's comprehensive meeting management platform.\n          </p>\n          <Button \n            onClick={handleLogin}\n            size=\"lg\"\n            data-testid=\"button-get-started\"\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90 text-lg px-8 py-3\"\n          >\n            Get Started\n          </Button>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 px-6 bg-muted/30\">\n        <div className=\"container mx-auto\">\n          <h3 className=\"text-3xl font-bold text-center text-foreground mb-12\">\n            Everything You Need to Manage Your Team\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card data-testid=\"card-feature-meetings\">\n              <CardContent className=\"p-6 text-center\">\n                <Calendar className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n                <h4 className=\"text-lg font-semibold text-foreground mb-2\">\n                  Weekly Meetings\n                </h4>\n                <p className=\"text-muted-foreground text-sm\">\n                  Schedule and manage Marketing, Focus Songs, Strategy, and Recap meetings with standardized agendas.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-focus-songs\">\n              <CardContent className=\"p-6 text-center\">\n                <Music className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n                <h4 className=\"text-lg font-semibold text-foreground mb-2\">\n                  Focus Songs Tracking\n                </h4>\n                <p className=\"text-muted-foreground text-sm\">\n                  Track progress across YouTube, social media, Spotify, and radio channels for each focus song.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-team\">\n              <CardContent className=\"p-6 text-center\">\n                <Users className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n                <h4 className=\"text-lg font-semibold text-foreground mb-2\">\n                  Team Management\n                </h4>\n                <p className=\"text-muted-foreground text-sm\">\n                  Organize team members across Marketing, Digital, and A&R departments with clear responsibilities.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-tasks\">\n              <CardContent className=\"p-6 text-center\">\n                <CheckCircle className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n                <h4 className=\"text-lg font-semibold text-foreground mb-2\">\n                  Task Management\n                </h4>\n                <p className=\"text-muted-foreground text-sm\">\n                  Assign tasks with deadlines, track progress, and ensure accountability across all team activities.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Departments Section */}\n      <section className=\"py-16 px-6\">\n        <div className=\"container mx-auto\">\n          <h3 className=\"text-3xl font-bold text-center text-foreground mb-12\">\n            Designed for Roton's Team Structure\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\" data-testid=\"department-marketing\">\n              <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-white font-bold text-xl\">M</span>\n              </div>\n              <h4 className=\"text-xl font-semibold text-foreground mb-3\">Marketing</h4>\n              <ul className=\"text-muted-foreground space-y-1 text-sm\">\n                <li>Press & Media Relations</li>\n                <li>Social Media & Campaigns</li>\n                <li>Radio & TV Promotion</li>\n                <li>Content Creation</li>\n                <li>Video Production</li>\n              </ul>\n            </div>\n\n            <div className=\"text-center\" data-testid=\"department-digital\">\n              <div className=\"w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-white font-bold text-xl\">D</span>\n              </div>\n              <h4 className=\"text-xl font-semibold text-foreground mb-3\">Digital</h4>\n              <ul className=\"text-muted-foreground space-y-1 text-sm\">\n                <li>YouTube Management</li>\n                <li>Digital Strategy</li>\n                <li>Spotify Analytics</li>\n                <li>Platform Optimization</li>\n              </ul>\n            </div>\n\n            <div className=\"text-center\" data-testid=\"department-ar\">\n              <div className=\"w-16 h-16 bg-purple-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-white font-bold text-xl\">A</span>\n              </div>\n              <h4 className=\"text-xl font-semibold text-foreground mb-3\">A&R & International</h4>\n              <ul className=\"text-muted-foreground space-y-1 text-sm\">\n                <li>Artist Development</li>\n                <li>International Partnerships</li>\n                <li>Global Radio Relations</li>\n                <li>Market Expansion</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border py-8 px-6\">\n        <div className=\"container mx-auto text-center\">\n          <p className=\"text-muted-foreground\">\n            Â© 2023 Roton Team Meeting Manager. Streamlining music industry collaboration.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":7573},"client/src/pages/meetings.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Calendar, Clock, Users, FileText, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useState } from \"react\";\nimport { format, isToday, isFuture, isPast } from \"date-fns\";\nimport MeetingCard from \"@/components/meetings/meeting-card\";\nimport NewMeetingDialog from \"@/components/meetings/new-meeting-dialog\";\nimport EditMeetingDialog from \"@/components/meetings/edit-meeting-dialog\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger,\n  DialogDescription \n} from \"@/components/ui/dialog\";\n\nexport default function Meetings() {\n  const [isNewMeetingOpen, setIsNewMeetingOpen] = useState(false);\n  const [isEditMeetingOpen, setIsEditMeetingOpen] = useState(false);\n  const [selectedMeeting, setSelectedMeeting] = useState<any>(null);\n  const [selectedMeetingId, setSelectedMeetingId] = useState<string | null>(null);\n  const [isDetailsOpen, setIsDetailsOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: meetings, isLoading } = useQuery({\n    queryKey: ['/api/meetings'],\n  });\n\n  const updateMeetingMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      await apiRequest('PATCH', `/api/meetings/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/meetings'] });\n      setIsEditMeetingOpen(false);\n      setSelectedMeeting(null);\n      setSelectedMeetingId(null);\n      toast({\n        title: \"Success\",\n        description: \"Meeting updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update meeting\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMeetingMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('DELETE', `/api/meetings/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/meetings'] });\n      setIsDetailsOpen(false);\n      setSelectedMeeting(null);\n      toast({\n        title: \"Success\",\n        description: \"Meeting deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete meeting\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getMeetingTypeName = (type: string) => {\n    switch (type) {\n      case 'marketing':\n        return 'Marketing Meeting';\n      case 'focus_songs_update':\n        return 'Focus Songs Update';\n      case 'focus_songs_strategy':\n        return 'Focus Songs Strategy';\n      case 'weekly_recap':\n        return 'Weekly Recap';\n      default:\n        return type;\n    }\n  };\n\n  const getMeetingTypeColor = (type: string) => {\n    switch (type) {\n      case 'marketing':\n        return 'bg-green-100 text-green-700';\n      case 'focus_songs_update':\n        return 'bg-blue-100 text-blue-700';\n      case 'focus_songs_strategy':\n        return 'bg-purple-100 text-purple-700';\n      case 'weekly_recap':\n        return 'bg-orange-100 text-orange-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const filterMeetings = (filter: 'all' | 'upcoming' | 'today' | 'past') => {\n    if (!Array.isArray(meetings)) return [];\n    \n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    switch (filter) {\n      case 'upcoming':\n        return meetings.filter((meeting: any) => {\n          const meetingDate = new Date(meeting.date);\n          meetingDate.setHours(0, 0, 0, 0);\n          return meetingDate > today;\n        });\n      case 'today':\n        return meetings.filter((meeting: any) => {\n          const meetingDate = new Date(meeting.date);\n          meetingDate.setHours(0, 0, 0, 0);\n          return meetingDate.getTime() === today.getTime();\n        });\n      case 'past':\n        return meetings.filter((meeting: any) => {\n          const meetingDate = new Date(meeting.date);\n          meetingDate.setHours(0, 0, 0, 0);\n          return meetingDate < today;\n        });\n      default:\n        return meetings;\n    }\n  };\n\n  const upcomingMeetings = filterMeetings('upcoming');\n  const todayMeetings = filterMeetings('today');\n  const pastMeetings = filterMeetings('past');\n\n  const handleMeetingClick = (meeting: any) => {\n    setSelectedMeeting(meeting);\n    setIsDetailsOpen(true);\n  };\n\n  const handleEditMeeting = (meeting: any) => {\n    setSelectedMeeting(meeting);\n    setSelectedMeetingId(meeting.id);\n    setIsEditMeetingOpen(true);\n  };\n\n  const handleDeleteMeeting = (meetingId: string) => {\n    deleteMeetingMutation.mutate(meetingId);\n  };\n\n  const handleDeleteFromModal = () => {\n    if (selectedMeeting) {\n      deleteMeetingMutation.mutate(selectedMeeting.id);\n    }\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Meetings</h2>\n          <p className=\"text-sm text-muted-foreground\">Manage team meetings and agendas</p>\n        </div>\n        <Button \n          onClick={() => setIsNewMeetingOpen(true)}\n          data-testid=\"button-new-meeting\"\n          className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          New Meeting\n        </Button>\n      </div>\n\n      {/* Meeting Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n        <Card data-testid=\"stat-total-meetings\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">{Array.isArray(meetings) ? meetings.length : 0}</div>\n            <p className=\"text-sm text-muted-foreground\">Total Meetings</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"stat-today-meetings\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">{todayMeetings.length}</div>\n            <p className=\"text-sm text-muted-foreground\">Today</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"stat-upcoming-meetings\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">{upcomingMeetings.length}</div>\n            <p className=\"text-sm text-muted-foreground\">Upcoming</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"stat-past-meetings\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-gray-600\">{pastMeetings.length}</div>\n            <p className=\"text-sm text-muted-foreground\">Past</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Meeting Tabs */}\n      <Tabs defaultValue=\"all\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"all\" data-testid=\"tab-all-meetings\">All Meetings</TabsTrigger>\n          <TabsTrigger value=\"today\" data-testid=\"tab-today\">Today ({todayMeetings.length})</TabsTrigger>\n          <TabsTrigger value=\"upcoming\" data-testid=\"tab-upcoming\">Upcoming ({upcomingMeetings.length})</TabsTrigger>\n          <TabsTrigger value=\"past\" data-testid=\"tab-past\">Past ({pastMeetings.length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"space-y-4\">\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-24 bg-muted animate-pulse rounded-lg\"></div>\n              ))}\n            </div>\n          ) : !Array.isArray(meetings) || meetings.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <Calendar className=\"w-16 h-16 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No Meetings Scheduled</h3>\n                <p className=\"text-muted-foreground text-center mb-4\">\n                  Start organizing your team by scheduling your first meeting.\n                </p>\n                <Button onClick={() => setIsNewMeetingOpen(true)} data-testid=\"button-add-first-meeting\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Schedule Meeting\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div data-testid=\"all-meetings-list\" className=\"space-y-4\">\n              {Array.isArray(meetings) && meetings.map((meeting: any) => (\n                <MeetingCard \n                  key={meeting.id} \n                  meeting={meeting} \n                  onClick={() => handleMeetingClick(meeting)}\n                  onEditMeeting={handleEditMeeting}\n                  onDeleteMeeting={handleDeleteMeeting}\n                  isUpdating={updateMeetingMutation.isPending || deleteMeetingMutation.isPending}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"today\" className=\"space-y-4\">\n          {todayMeetings.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <Clock className=\"w-16 h-16 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No Meetings Today</h3>\n                <p className=\"text-muted-foreground\">No meetings scheduled for today</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div data-testid=\"today-meetings-list\" className=\"space-y-4\">\n              {todayMeetings.map((meeting: any) => (\n                <MeetingCard \n                  key={meeting.id} \n                  meeting={meeting} \n                  onClick={() => handleMeetingClick(meeting)}\n                  onEditMeeting={handleEditMeeting}\n                  onDeleteMeeting={handleDeleteMeeting}\n                  isUpdating={updateMeetingMutation.isPending || deleteMeetingMutation.isPending}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"upcoming\" className=\"space-y-4\">\n          {upcomingMeetings.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <Calendar className=\"w-16 h-16 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No Upcoming Meetings</h3>\n                <p className=\"text-muted-foreground\">No meetings scheduled for the future</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div data-testid=\"upcoming-meetings-list\" className=\"space-y-4\">\n              {upcomingMeetings.map((meeting: any) => (\n                <MeetingCard \n                  key={meeting.id} \n                  meeting={meeting} \n                  onClick={() => handleMeetingClick(meeting)}\n                  onEditMeeting={handleEditMeeting}\n                  onDeleteMeeting={handleDeleteMeeting}\n                  isUpdating={updateMeetingMutation.isPending || deleteMeetingMutation.isPending}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"past\" className=\"space-y-4\">\n          {pastMeetings.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <FileText className=\"w-16 h-16 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No Past Meetings</h3>\n                <p className=\"text-muted-foreground\">Past meetings will appear here</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div data-testid=\"past-meetings-list\" className=\"space-y-4\">\n              {pastMeetings.map((meeting: any) => (\n                <MeetingCard \n                  key={meeting.id} \n                  meeting={meeting} \n                  onClick={() => handleMeetingClick(meeting)}\n                  onEditMeeting={handleEditMeeting}\n                  onDeleteMeeting={handleDeleteMeeting}\n                  isUpdating={updateMeetingMutation.isPending || deleteMeetingMutation.isPending}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Meeting Details Dialog */}\n      <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          {selectedMeeting && (\n            <>\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center justify-between\">\n                  <span>{selectedMeeting.title}</span>\n                  <Badge className={getMeetingTypeColor(selectedMeeting.type)}>\n                    {getMeetingTypeName(selectedMeeting.type)}\n                  </Badge>\n                </DialogTitle>\n                <DialogDescription>\n                  {format(new Date(selectedMeeting.date), 'EEEE, MMMM d, yyyy')} at {format(new Date(`2000-01-01T${selectedMeeting.time}`), 'h:mm a')}\n                </DialogDescription>\n              </DialogHeader>\n              \n              <div className=\"space-y-6\">\n                {selectedMeeting.description && (\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Description</h4>\n                    <p className=\"text-sm text-muted-foreground\">{selectedMeeting.description}</p>\n                  </div>\n                )}\n\n                {selectedMeeting.participants && selectedMeeting.participants.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Participants</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {selectedMeeting.participants.map((participant: string, index: number) => (\n                        <Badge key={index} variant=\"secondary\">{participant}</Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {selectedMeeting.agenda && selectedMeeting.agenda.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Agenda</h4>\n                    <ul className=\"list-disc list-inside space-y-1\">\n                      {selectedMeeting.agenda.map((item: string, index: number) => (\n                        <li key={index} className=\"text-sm text-muted-foreground\">{item}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                  <span className=\"text-sm text-muted-foreground\">\n                    Duration: {selectedMeeting.duration || 60} minutes\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between pt-6 border-t\">\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleDeleteFromModal}\n                  disabled={deleteMeetingMutation.isPending}\n                  data-testid=\"button-delete-meeting\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  {deleteMeetingMutation.isPending ? 'Deleting...' : 'Delete Meeting'}\n                </Button>\n                \n                <div className=\"space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setIsDetailsOpen(false)}>\n                    Close\n                  </Button>\n                  <Button \n                    onClick={() => {\n                      setIsDetailsOpen(false);\n                      handleEditMeeting(selectedMeeting);\n                    }}\n                    data-testid=\"button-edit-meeting\"\n                  >\n                    <Edit className=\"w-4 h-4 mr-2\" />\n                    Edit Meeting\n                  </Button>\n                </div>\n              </div>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <NewMeetingDialog open={isNewMeetingOpen} onOpenChange={setIsNewMeetingOpen} />\n      <EditMeetingDialog \n        open={isEditMeetingOpen} \n        onOpenChange={setIsEditMeetingOpen}\n        meeting={selectedMeeting}\n        meetingId={selectedMeetingId}\n      />\n    </div>\n  );\n}\n","size_bytes":16816},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/tasks.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, CheckCircle, Clock, AlertCircle, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format, isPast } from \"date-fns\";\nimport TaskItem from \"@/components/tasks/task-item\";\n\nexport default function Tasks() {\n  const [isNewTaskOpen, setIsNewTaskOpen] = useState(false);\n  const [isEditTaskOpen, setIsEditTaskOpen] = useState(false);\n  const [selectedTaskId, setSelectedTaskId] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const { data: allTasks, isLoading } = useQuery({\n    queryKey: ['/api/tasks'],\n  });\n\n  const { data: teamMembers } = useQuery({\n    queryKey: ['/api/team-members'],\n  });\n\n  const { data: focusSongs } = useQuery({\n    queryKey: ['/api/focus-songs'],\n  });\n\n  const form = useForm({\n    defaultValues: {\n      title: '',\n      description: '',\n      assignedTo: '',\n      assignedToName: '',\n      priority: 'medium',\n      deadline: '',\n      channel: 'general',\n      focusSongId: 'none',\n    }\n  });\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest('POST', '/api/tasks', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      setIsNewTaskOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Task created successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      await apiRequest('PATCH', `/api/tasks/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      setIsEditTaskOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Task updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('DELETE', `/api/tasks/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      toast({\n        title: \"Success\",\n        description: \"Task deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    const selectedMember = Array.isArray(teamMembers) ? teamMembers.find((member: any) => member.id === data.assignedTo) : undefined;\n    \n    createTaskMutation.mutate({\n      ...data,\n      assignedToName: selectedMember?.name || '',\n      focusSongId: data.focusSongId === 'none' ? null : data.focusSongId,\n      deadline: data.deadline === '' ? null : data.deadline,\n    });\n  };\n\n  const handleStatusChange = (taskId: string, newStatus: string) => {\n    updateTaskMutation.mutate({ id: taskId, data: { status: newStatus } });\n  };\n\n  const handleEditTask = (task: any) => {\n    const selectedMember = Array.isArray(teamMembers) ? teamMembers.find((member: any) => member.name === task.assignedToName) : undefined;\n    \n    form.reset({\n      title: task.title || '',\n      description: task.description || '',\n      assignedTo: selectedMember?.id || '',\n      assignedToName: task.assignedToName || '',\n      priority: task.priority || 'medium',\n      deadline: task.deadline || '',\n      channel: task.channel || 'general',\n      focusSongId: task.focusSongId || 'none',\n    });\n    setSelectedTaskId(task.id);\n    setIsEditTaskOpen(true);\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    deleteTaskMutation.mutate(taskId);\n  };\n\n  const onEditSubmit = (data: any) => {\n    if (selectedTaskId) {\n      const selectedMember = Array.isArray(teamMembers) ? teamMembers.find((member: any) => member.id === data.assignedTo) : undefined;\n      \n      updateTaskMutation.mutate({\n        id: selectedTaskId,\n        data: {\n          ...data,\n          assignedToName: selectedMember?.name || '',\n          focusSongId: data.focusSongId === 'none' ? null : data.focusSongId,\n          deadline: data.deadline === '' ? null : data.deadline,\n        }\n      });\n    }\n  };\n\n  const filterTasks = (status?: string) => {\n    if (!Array.isArray(allTasks)) return [];\n    if (!status) return allTasks;\n    return allTasks.filter((task: any) => task.status === status);\n  };\n\n  const todoTasks = filterTasks('todo');\n  const inProgressTasks = filterTasks('in_progress');\n  const doneTasks = filterTasks('done');\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-700';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-700';\n      case 'low':\n        return 'bg-green-100 text-green-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getChannelIcon = (channel: string) => {\n    switch (channel) {\n      case 'youtube':\n        return 'ðŸ“º';\n      case 'social_media':\n        return 'ðŸ“±';\n      case 'spotify':\n        return 'ðŸŽµ';\n      case 'radio':\n        return 'ðŸ“»';\n      case 'general':\n      case '':\n      default:\n        return 'ðŸ“‹';\n    }\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Tasks</h2>\n          <p className=\"text-sm text-muted-foreground\">Manage team assignments and deadlines</p>\n        </div>\n        <Dialog open={isNewTaskOpen} onOpenChange={setIsNewTaskOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-task\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Task\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create New Task</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Task Title</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-task-title\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} data-testid=\"textarea-task-description\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"assignedTo\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Assigned To</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-assignee\">\n                              <SelectValue placeholder=\"Select team member\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {Array.isArray(teamMembers) && teamMembers.map((member: any) => (\n                              <SelectItem key={member.id} value={member.id}>\n                                {member.name} - {member.jobTitle}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"priority\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Priority</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-priority\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"low\">Low</SelectItem>\n                            <SelectItem value=\"medium\">Medium</SelectItem>\n                            <SelectItem value=\"high\">High</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"deadline\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Deadline</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-deadline\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"channel\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Channel</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-channel\">\n                              <SelectValue placeholder=\"Select channel\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"general\">General</SelectItem>\n                            <SelectItem value=\"youtube\">YouTube</SelectItem>\n                            <SelectItem value=\"social_media\">Social Media</SelectItem>\n                            <SelectItem value=\"spotify\">Spotify</SelectItem>\n                            <SelectItem value=\"radio\">Radio</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"focusSongId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Related Focus Song (Optional)</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-focus-song\">\n                            <SelectValue placeholder=\"Select focus song\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"none\">None</SelectItem>\n                          {Array.isArray(focusSongs) && focusSongs.map((song: any) => (\n                            <SelectItem key={song.id} value={song.id}>\n                              {song.title} - {song.artist}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsNewTaskOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createTaskMutation.isPending}\n                    data-testid=\"button-create-task\"\n                  >\n                    {createTaskMutation.isPending ? 'Creating...' : 'Create Task'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Task Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n        <Card data-testid=\"stat-total-tasks\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">{Array.isArray(allTasks) ? allTasks.length : 0}</div>\n            <p className=\"text-sm text-muted-foreground\">Total Tasks</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"stat-todo-tasks\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">{todoTasks.length}</div>\n            <p className=\"text-sm text-muted-foreground\">To Do</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"stat-progress-tasks\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-yellow-600\">{inProgressTasks.length}</div>\n            <p className=\"text-sm text-muted-foreground\">In Progress</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"stat-done-tasks\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">{doneTasks.length}</div>\n            <p className=\"text-sm text-muted-foreground\">Completed</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Task Tabs */}\n      <Tabs defaultValue=\"all\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"all\" data-testid=\"tab-all-tasks\">All Tasks</TabsTrigger>\n          <TabsTrigger value=\"todo\" data-testid=\"tab-todo\">To Do ({todoTasks.length})</TabsTrigger>\n          <TabsTrigger value=\"progress\" data-testid=\"tab-progress\">In Progress ({inProgressTasks.length})</TabsTrigger>\n          <TabsTrigger value=\"done\" data-testid=\"tab-done\">Done ({doneTasks.length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"space-y-4\">\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-24 bg-muted animate-pulse rounded-lg\"></div>\n              ))}\n            </div>\n          ) : !Array.isArray(allTasks) || allTasks.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <CheckCircle className=\"w-16 h-16 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No Tasks Yet</h3>\n                <p className=\"text-muted-foreground text-center mb-4\">\n                  Start managing your team's workload by creating your first task.\n                </p>\n                <Button onClick={() => setIsNewTaskOpen(true)} data-testid=\"button-add-first-task\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Task\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div data-testid=\"all-tasks-list\" className=\"space-y-4\">\n              {Array.isArray(allTasks) && allTasks.map((task: any) => (\n                <TaskItem \n                  key={task.id} \n                  task={task} \n                  onStatusChange={handleStatusChange}\n                  onEditTask={handleEditTask}\n                  onDeleteTask={handleDeleteTask}\n                  isUpdating={updateTaskMutation.isPending}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"todo\" className=\"space-y-4\">\n          <div data-testid=\"todo-tasks-list\" className=\"space-y-4\">\n            {todoTasks.map((task: any) => (\n              <TaskItem \n                key={task.id} \n                task={task} \n                onStatusChange={handleStatusChange}\n                onEditTask={handleEditTask}\n                onDeleteTask={handleDeleteTask}\n                isUpdating={updateTaskMutation.isPending}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"progress\" className=\"space-y-4\">\n          <div data-testid=\"progress-tasks-list\" className=\"space-y-4\">\n            {inProgressTasks.map((task: any) => (\n              <TaskItem \n                key={task.id} \n                task={task} \n                onStatusChange={handleStatusChange}\n                onEditTask={handleEditTask}\n                onDeleteTask={handleDeleteTask}\n                isUpdating={updateTaskMutation.isPending}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"done\" className=\"space-y-4\">\n          <div data-testid=\"done-tasks-list\" className=\"space-y-4\">\n            {doneTasks.map((task: any) => (\n              <TaskItem \n                key={task.id} \n                task={task} \n                onStatusChange={handleStatusChange}\n                onEditTask={handleEditTask}\n                onDeleteTask={handleDeleteTask}\n                isUpdating={updateTaskMutation.isPending}\n              />\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit Task Dialog */}\n      <Dialog open={isEditTaskOpen} onOpenChange={setIsEditTaskOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Task</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Task Title</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-edit-task-title\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} data-testid=\"textarea-edit-task-description\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"assignedTo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Assigned To</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-assignee\">\n                            <SelectValue placeholder=\"Select team member\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {Array.isArray(teamMembers) && teamMembers.map((member: any) => (\n                            <SelectItem key={member.id} value={member.id}>\n                              {member.name} - {member.jobTitle}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"priority\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Priority</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-priority\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"low\">Low</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"high\">High</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"deadline\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Deadline</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-edit-deadline\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"channel\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Channel</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-channel\">\n                            <SelectValue placeholder=\"Select channel\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"general\">General</SelectItem>\n                          <SelectItem value=\"youtube\">YouTube</SelectItem>\n                          <SelectItem value=\"social_media\">Social Media</SelectItem>\n                          <SelectItem value=\"spotify\">Spotify</SelectItem>\n                          <SelectItem value=\"radio\">Radio</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"focusSongId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Related Focus Song (Optional)</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-focus-song\">\n                          <SelectValue placeholder=\"Select focus song\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"none\">None</SelectItem>\n                        {Array.isArray(focusSongs) && focusSongs.map((song: any) => (\n                          <SelectItem key={song.id} value={song.id}>\n                            {song.title} - {song.artist}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditTaskOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={updateTaskMutation.isPending}\n                  data-testid=\"button-update-task\"\n                >\n                  {updateTaskMutation.isPending ? 'Updating...' : 'Update Task'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":25829},"client/src/pages/team.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Users, Mail, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport TeamMember from \"@/components/team/team-member\";\n\nexport default function Team() {\n  const [isNewMemberOpen, setIsNewMemberOpen] = useState(false);\n  const [isEditMemberOpen, setIsEditMemberOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [selectedMember, setSelectedMember] = useState<any>(null);\n  const { toast } = useToast();\n\n  const { data: teamMembers, isLoading } = useQuery({\n    queryKey: ['/api/team-members'],\n  });\n\n  const form = useForm({\n    defaultValues: {\n      name: '',\n      email: '',\n      department: '',\n      jobTitle: '',\n      responsibilities: '',\n    }\n  });\n\n  const editForm = useForm({\n    defaultValues: {\n      name: '',\n      email: '',\n      department: '',\n      jobTitle: '',\n      responsibilities: '',\n    }\n  });\n\n  const createMemberMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest('POST', '/api/team-members', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/team-members'] });\n      setIsNewMemberOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Team member added successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add team member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMemberMutation = useMutation({\n    mutationFn: async (memberId: string) => {\n      await apiRequest('DELETE', `/api/team-members/${memberId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/team-members'] });\n      setIsDeleteDialogOpen(false);\n      setSelectedMember(null);\n      toast({\n        title: \"Success\",\n        description: \"Team member deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete team member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMemberMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      await apiRequest('PATCH', `/api/team-members/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/team-members'] });\n      setIsEditMemberOpen(false);\n      setSelectedMember(null);\n      editForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Team member updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update team member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createMemberMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: any) => {\n    if (selectedMember) {\n      updateMemberMutation.mutate({ id: selectedMember.id, data });\n    }\n  };\n\n  const handleEdit = (member: any) => {\n    setSelectedMember(member);\n    editForm.reset({\n      name: member.name,\n      email: member.email,\n      department: member.department,\n      jobTitle: member.jobTitle,\n      responsibilities: member.responsibilities,\n    });\n    setIsEditMemberOpen(true);\n  };\n\n  const handleDelete = (member: any) => {\n    setSelectedMember(member);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (selectedMember) {\n      deleteMemberMutation.mutate(selectedMember.id);\n    }\n  };\n\n  const getDepartmentColor = (department: string) => {\n    switch (department) {\n      case 'marketing':\n        return 'bg-green-500';\n      case 'digital':\n        return 'bg-blue-500';\n      case 'ar_international':\n        return 'bg-purple-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getDepartmentName = (department: string) => {\n    switch (department) {\n      case 'marketing':\n        return 'Marketing';\n      case 'digital':\n        return 'Digital';\n      case 'ar_international':\n        return 'A&R & International';\n      default:\n        return department;\n    }\n  };\n\n  const filterByDepartment = (department: string) => {\n    return Array.isArray(teamMembers) ? teamMembers.filter((member: any) => member.department === department) : [];\n  };\n\n  const marketingTeam = filterByDepartment('marketing');\n  const digitalTeam = filterByDepartment('digital');\n  const arTeam = filterByDepartment('ar_international');\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Team Management</h2>\n          <p className=\"text-sm text-muted-foreground\">Manage team members across Marketing, Digital, and A&R departments</p>\n        </div>\n        <Dialog open={isNewMemberOpen} onOpenChange={setIsNewMemberOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-member\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Team Member\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Add New Team Member</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-member-name\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" {...field} data-testid=\"input-member-email\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"department\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Department</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-department\">\n                              <SelectValue placeholder=\"Select department\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"marketing\">Marketing</SelectItem>\n                            <SelectItem value=\"digital\">Digital</SelectItem>\n                            <SelectItem value=\"ar_international\">A&R & International</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"jobTitle\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Job Title</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-job-title\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"responsibilities\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Responsibilities</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} data-testid=\"textarea-responsibilities\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsNewMemberOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMemberMutation.isPending}\n                    data-testid=\"button-create-member\"\n                  >\n                    {createMemberMutation.isPending ? 'Adding...' : 'Add Member'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Member Dialog */}\n        <Dialog open={isEditMemberOpen} onOpenChange={setIsEditMemberOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit Team Member</DialogTitle>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-edit-member-name\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" {...field} data-testid=\"input-edit-member-email\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"department\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Department</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-department\">\n                              <SelectValue placeholder=\"Select department\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"marketing\">Marketing</SelectItem>\n                            <SelectItem value=\"digital\">Digital</SelectItem>\n                            <SelectItem value=\"ar_international\">A&R & International</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"jobTitle\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Job Title</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-edit-job-title\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={editForm.control}\n                  name=\"responsibilities\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Responsibilities</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} data-testid=\"textarea-edit-responsibilities\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditMemberOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={updateMemberMutation.isPending}\n                    data-testid=\"button-update-member\"\n                  >\n                    {updateMemberMutation.isPending ? 'Updating...' : 'Update Member'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Delete Confirmation Dialog */}\n        <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n          <AlertDialogContent data-testid=\"delete-member-dialog\">\n            <AlertDialogHeader>\n              <AlertDialogTitle>Delete Team Member</AlertDialogTitle>\n              <AlertDialogDescription>\n                Are you sure you want to delete <strong>{selectedMember?.name}</strong>? This action cannot be undone and will remove all associated data.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n              <AlertDialogAction\n                onClick={confirmDelete}\n                disabled={deleteMemberMutation.isPending}\n                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                data-testid=\"button-confirm-delete\"\n              >\n                {deleteMemberMutation.isPending ? 'Deleting...' : 'Delete'}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </div>\n\n      {/* Team Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n        <Card data-testid=\"stat-total-members\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">{Array.isArray(teamMembers) ? teamMembers.length : 0}</div>\n            <p className=\"text-sm text-muted-foreground\">Total Members</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"stat-marketing-members\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">{marketingTeam.length}</div>\n            <p className=\"text-sm text-muted-foreground\">Marketing</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"stat-digital-members\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">{digitalTeam.length}</div>\n            <p className=\"text-sm text-muted-foreground\">Digital</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"stat-ar-members\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">{arTeam.length}</div>\n            <p className=\"text-sm text-muted-foreground\">A&R & International</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Team Tabs */}\n      <Tabs defaultValue=\"all\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"all\" data-testid=\"tab-all-members\">All Members</TabsTrigger>\n          <TabsTrigger value=\"marketing\" data-testid=\"tab-marketing\">Marketing ({marketingTeam.length})</TabsTrigger>\n          <TabsTrigger value=\"digital\" data-testid=\"tab-digital\">Digital ({digitalTeam.length})</TabsTrigger>\n          <TabsTrigger value=\"ar\" data-testid=\"tab-ar\">A&R & International ({arTeam.length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"space-y-6\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-48 bg-muted animate-pulse rounded-lg\"></div>\n              ))}\n            </div>\n          ) : !Array.isArray(teamMembers) || teamMembers.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <Users className=\"w-16 h-16 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No Team Members</h3>\n                <p className=\"text-muted-foreground text-center mb-4\">\n                  Start building your team by adding your first team member.\n                </p>\n                <Button onClick={() => setIsNewMemberOpen(true)} data-testid=\"button-add-first-member\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Team Member\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\" data-testid=\"all-members-grid\">\n              {Array.isArray(teamMembers) && teamMembers.map((member: any) => (\n                <TeamMember \n                  key={member.id} \n                  member={member} \n                  onEdit={() => handleEdit(member)}\n                  onDelete={() => handleDelete(member)}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"marketing\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-sm\">M</span>\n                </div>\n                <div>\n                  <h3 className=\"text-lg\">Marketing Department</h3>\n                  <p className=\"text-sm text-muted-foreground\">Press, social media, radio, content, and video production</p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {marketingTeam.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No marketing team members yet</p>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\" data-testid=\"marketing-members-grid\">\n                  {marketingTeam.map((member: any) => (\n                    <TeamMember \n                      key={member.id} \n                      member={member} \n                      onEdit={() => handleEdit(member)}\n                      onDelete={() => handleDelete(member)}\n                    />\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"digital\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-sm\">D</span>\n                </div>\n                <div>\n                  <h3 className=\"text-lg\">Digital Department</h3>\n                  <p className=\"text-sm text-muted-foreground\">YouTube, digital strategy, Spotify, and platform optimization</p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {digitalTeam.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No digital team members yet</p>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\" data-testid=\"digital-members-grid\">\n                  {digitalTeam.map((member: any) => (\n                    <TeamMember \n                      key={member.id} \n                      member={member} \n                      onEdit={() => handleEdit(member)}\n                      onDelete={() => handleDelete(member)}\n                    />\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"ar\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-sm\">A</span>\n                </div>\n                <div>\n                  <h3 className=\"text-lg\">A&R & International Department</h3>\n                  <p className=\"text-sm text-muted-foreground\">Artist development, international partnerships, and global radio</p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {arTeam.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No A&R & International team members yet</p>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\" data-testid=\"ar-members-grid\">\n                  {arTeam.map((member: any) => (\n                    <TeamMember \n                      key={member.id} \n                      member={member} \n                      onEdit={() => handleEdit(member)}\n                      onDelete={() => handleDelete(member)}\n                    />\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":23977},"client/src/components/focus-songs/song-card.tsx":{"content":"import { Music, Youtube, Users, Radio, ListMusic, Edit, MoreHorizontal } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SongCardProps {\n  song: any;\n  onEdit?: () => void;\n}\n\nexport default function SongCard({ song, onEdit }: SongCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-blue-100 text-blue-700';\n      case 'promoted':\n        return 'bg-green-100 text-green-700';\n      case 'planning':\n        return 'bg-yellow-100 text-yellow-700';\n      case 'paused':\n        return 'bg-gray-100 text-gray-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  return (\n    <Card className=\"mb-4\" data-testid={`song-card-${song.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-secondary rounded-lg flex items-center justify-center\">\n              <Music className=\"w-6 h-6 text-secondary-foreground\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-lg\" data-testid={`song-title-${song.id}`}>\n                {song.title}\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`song-artist-${song.id}`}>\n                {song.artist}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge className={getStatusColor(song.status)} data-testid={`song-status-${song.id}`}>\n              {song.status}\n            </Badge>\n            {song.category === 'back_catalog' && (\n              <Badge variant=\"outline\">Back Catalog</Badge>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8\"\n              onClick={onEdit}\n              data-testid={`song-edit-${song.id}`}\n            >\n              <MoreHorizontal className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {/* YouTube */}\n          <div className=\"space-y-2\" data-testid={`song-youtube-${song.id}`}>\n            <div className=\"flex items-center space-x-2\">\n              <Youtube className=\"w-4 h-4 text-red-500\" />\n              <span className=\"text-sm font-medium\">YouTube</span>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {song.youtubeProgress || 'No progress logged'}\n            </p>\n            {song.youtubeResponsible && (\n              <p className=\"text-xs text-primary\">Responsible: {song.youtubeResponsible}</p>\n            )}\n          </div>\n\n          {/* Social Media */}\n          <div className=\"space-y-2\" data-testid={`song-social-${song.id}`}>\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"w-4 h-4 text-blue-500\" />\n              <span className=\"text-sm font-medium\">Social Media</span>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {song.socialMediaProgress || 'No progress logged'}\n            </p>\n            {song.socialMediaResponsible && (\n              <p className=\"text-xs text-primary\">Responsible: {song.socialMediaResponsible}</p>\n            )}\n          </div>\n\n          {/* ListMusic */}\n          <div className=\"space-y-2\" data-testid={`song-spotify-${song.id}`}>\n            <div className=\"flex items-center space-x-2\">\n              <ListMusic className=\"w-4 h-4 text-green-500\" />\n              <span className=\"text-sm font-medium\">ListMusic</span>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {song.spotifyProgress || 'No progress logged'}\n            </p>\n            {song.spotifyResponsible && (\n              <p className=\"text-xs text-primary\">Responsible: {song.spotifyResponsible}</p>\n            )}\n          </div>\n\n          {/* Radio */}\n          <div className=\"space-y-2\" data-testid={`song-radio-${song.id}`}>\n            <div className=\"flex items-center space-x-2\">\n              <Radio className=\"w-4 h-4 text-purple-500\" />\n              <span className=\"text-sm font-medium\">Radio</span>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {song.radioProgress || 'No progress logged'}\n            </p>\n            {song.radioResponsible && (\n              <p className=\"text-xs text-primary\">Responsible: {song.radioResponsible}</p>\n            )}\n          </div>\n        </div>\n\n        {song.notes && (\n          <div className=\"mt-4 pt-4 border-t border-border\">\n            <p className=\"text-sm text-muted-foreground\" data-testid={`song-notes-${song.id}`}>\n              {song.notes}\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5103},"client/src/components/layout/header.tsx":{"content":"import { Bell, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle?: string;\n  onNewMeeting?: () => void;\n  children?: React.ReactNode;\n}\n\nexport default function Header({ title, subtitle, onNewMeeting, children }: HeaderProps) {\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\" data-testid=\"page-header\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"page-title\">{title}</h2>\n          {subtitle && (\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"page-subtitle\">{subtitle}</p>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\" \n            size=\"icon\"\n            data-testid=\"button-notifications\"\n            className=\"relative text-muted-foreground hover:text-foreground\"\n          >\n            <Bell className=\"w-6 h-6\" />\n            <span className=\"absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-400\"></span>\n          </Button>\n          {onNewMeeting && (\n            <Button \n              onClick={onNewMeeting}\n              data-testid=\"button-header-new-meeting\"\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Meeting\n            </Button>\n          )}\n          {children}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1571},"client/src/components/layout/main-layout.tsx":{"content":"import Sidebar from \"./sidebar\";\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function MainLayout({ children }: MainLayoutProps) {\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 bg-muted/30\" data-testid=\"main-content\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":367},"client/src/components/layout/sidebar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Calendar, Music, Users, CheckCircle, BarChart3, FileText, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: BarChart3 },\n  { name: 'Calendar', href: '/calendar', icon: Calendar },\n  { name: 'Focus Songs', href: '/focus-songs', icon: Music },\n  { name: 'Tasks', href: '/tasks', icon: CheckCircle },\n  { name: 'Team', href: '/team', icon: Users },\n  { name: 'Meetings', href: '/meetings', icon: FileText },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border flex flex-col\" data-testid=\"sidebar\">\n      {/* Logo */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Music className=\"w-5 h-5 text-primary-foreground\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-foreground\">Roton Meetings</h1>\n            <p className=\"text-sm text-muted-foreground\">Team Management</p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\" data-testid=\"sidebar-nav\">\n        {navigation.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          \n          return (\n            <a\n              key={item.name}\n              href={item.href}\n              className={cn(\n                \"nav-item flex items-center px-3 py-2 rounded-md text-sm font-medium transition-colors\",\n                isActive\n                  ? \"active bg-primary text-primary-foreground\"\n                  : \"text-muted-foreground hover:text-foreground hover:bg-accent\"\n              )}\n              data-testid={`nav-link-${item.name.toLowerCase().replace(' ', '-')}`}\n            >\n              <Icon className=\"w-5 h-5 mr-3\" />\n              {item.name}\n            </a>\n          );\n        })}\n      </nav>\n      \n      {/* User Profile */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-medium\">\n              <User className=\"w-4 h-4\" />\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-foreground\" data-testid=\"user-name\">\n                {user && typeof user === 'object' && 'firstName' in user && 'lastName' in user && user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : 'User'}\n              </p>\n              <p className=\"text-xs text-muted-foreground\" data-testid=\"user-role\">Team Member</p>\n            </div>\n          </div>\n          <button \n            onClick={handleLogout}\n            className=\"text-xs text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-logout\"\n          >\n            Logout\n          </button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3371},"client/src/components/meetings/meeting-card.tsx":{"content":"import { format } from \"date-fns\";\nimport { Clock, Users, MoreVertical, Edit, Trash2 } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { useState } from \"react\";\n\ninterface MeetingCardProps {\n  meeting: any;\n  onClick?: () => void;\n  onEditMeeting: (meeting: any) => void;\n  onDeleteMeeting: (meetingId: string) => void;\n  isUpdating?: boolean;\n}\n\nexport default function MeetingCard({ meeting, onClick, onEditMeeting, onDeleteMeeting, isUpdating }: MeetingCardProps) {\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const getMeetingTypeName = (type: string) => {\n    switch (type) {\n      case 'marketing':\n        return 'Marketing Meeting';\n      case 'focus_songs_update':\n        return 'Focus Songs Update';\n      case 'focus_songs_strategy':\n        return 'Focus Songs Strategy';\n      case 'weekly_recap':\n        return 'Weekly Recap';\n      default:\n        return type;\n    }\n  };\n\n  const getMeetingTypeColor = (type: string) => {\n    switch (type) {\n      case 'marketing':\n        return 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300';\n      case 'focus_songs_update':\n        return 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300';\n      case 'focus_songs_strategy':\n        return 'bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300';\n      case 'weekly_recap':\n        return 'bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-300';\n      default:\n        return 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300';\n    }\n  };\n\n  const getDayAbbreviation = (date: string) => {\n    return format(new Date(date), 'EEE').toUpperCase();\n  };\n\n  const getStatusBadge = (date: string, time: string) => {\n    const meetingDate = new Date(`${date}T${time}`);\n    const now = new Date();\n    \n    if (meetingDate > now) {\n      return <Badge className=\"bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300\">Scheduled</Badge>;\n    } else {\n      return <Badge className=\"bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300\">Completed</Badge>;\n    }\n  };\n\n  const handleEditClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onEditMeeting(meeting);\n  };\n\n  const handleDeleteClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setShowDeleteDialog(true);\n  };\n\n  const handleConfirmDelete = () => {\n    setShowDeleteDialog(false);\n    onDeleteMeeting(meeting.id);\n  };\n\n  const handleCardClick = () => {\n    if (onClick) {\n      onClick();\n    }\n  };\n\n  return (\n    <>\n      <Card \n        className=\"meeting-card cursor-pointer transition-all hover:shadow-md\" \n        onClick={handleCardClick}\n        data-testid={`meeting-card-${meeting.id}`}\n      >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-secondary rounded-lg flex items-center justify-center\">\n              <span className=\"text-sm font-medium text-secondary-foreground\">\n                {getDayAbbreviation(meeting.date)}\n              </span>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-foreground\" data-testid={`meeting-title-${meeting.id}`}>\n                {meeting.title}\n              </h4>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`meeting-description-${meeting.id}`}>\n                {meeting.description || getMeetingTypeName(meeting.type)}\n              </p>\n              <div className=\"flex items-center mt-1 space-x-4\">\n                <div className=\"flex items-center space-x-1\">\n                  <Clock className=\"w-3 h-3 text-muted-foreground\" />\n                  <span className=\"text-xs text-muted-foreground\" data-testid={`meeting-time-${meeting.id}`}>\n                    {format(new Date(`2000-01-01T${meeting.time}`), 'h:mm a')}\n                  </span>\n                </div>\n                <span className=\"text-xs text-muted-foreground\">â€¢</span>\n                <div className=\"flex items-center space-x-1\">\n                  <Users className=\"w-3 h-3 text-muted-foreground\" />\n                  <span className=\"text-xs text-muted-foreground\" data-testid={`meeting-participants-${meeting.id}`}>\n                    {meeting.participants?.length ? `${meeting.participants.length} participants` : 'Full Team'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge className={getMeetingTypeColor(meeting.type)} data-testid={`meeting-type-${meeting.id}`}>\n              {getMeetingTypeName(meeting.type)}\n            </Badge>\n            {getStatusBadge(meeting.date, meeting.time)}\n            \n            {/* 3-dot Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n                  disabled={isUpdating}\n                  data-testid={`meeting-menu-${meeting.id}`}\n                >\n                  <MoreVertical className=\"w-4 h-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\n                <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                \n                <DropdownMenuItem onClick={handleEditClick} data-testid={`edit-meeting-${meeting.id}`}>\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit Meeting\n                </DropdownMenuItem>\n                \n                <DropdownMenuSeparator />\n                <DropdownMenuItem \n                  onClick={handleDeleteClick}\n                  className=\"text-red-600 focus:text-red-600 dark:text-red-400 dark:focus:text-red-400\"\n                  data-testid={`delete-meeting-${meeting.id}`}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete Meeting\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n\n    <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Delete Meeting</AlertDialogTitle>\n          <AlertDialogDescription>\n            Are you sure you want to delete \"{meeting.title}\"? This action cannot be undone.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel data-testid=\"cancel-delete-meeting\">Cancel</AlertDialogCancel>\n          <AlertDialogAction \n            onClick={handleConfirmDelete}\n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            data-testid=\"confirm-delete-meeting\"\n          >\n            Delete Meeting\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n    </>\n  );\n}","size_bytes":7672},"client/src/components/meetings/new-meeting-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { TeamMemberSelector } from \"@/components/ui/team-member-selector\";\nimport { X } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAssignmentHelpers } from \"@/hooks/use-team-members\";\n\ninterface NewMeetingDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst meetingTemplates = {\n  marketing: {\n    title: 'Marketing Meeting',\n    agenda: [\n      'Quick round of priorities',\n      'Active songs (press, social, radio, content, video)',\n      'New tasks assignment',\n      'Weekly calendar review',\n      'Final summary and assignments'\n    ],\n    duration: '60'\n  },\n  focus_songs_update: {\n    title: 'Focus Songs Update Meeting',\n    agenda: [\n      'Focus songs updates (15 min per song)',\n      'Last week\\'s actions and results',\n      'This week\\'s plan',\n      'Back catalog song selection (mandatory)',\n      'Confirm tasks per department'\n    ],\n    duration: '90'\n  },\n  focus_songs_strategy: {\n    title: 'Focus Songs Strategy Meeting',\n    agenda: [\n      'Follow-up on last week\\'s proposals',\n      'Analyze each song current status',\n      'New ideas and strategies',\n      'Clear actions and responsibilities',\n      'Recap of assignments and deadlines'\n    ],\n    duration: '120'\n  },\n  weekly_recap: {\n    title: 'Weekly Recap Meeting',\n    agenda: [\n      'Quick round of accomplishments',\n      'Obstacles and challenges',\n      'Progress recap on focus songs',\n      'Notes for next week',\n      'Action items review'\n    ],\n    duration: '45'\n  }\n};\n\nexport default function NewMeetingDialog({ open, onOpenChange }: NewMeetingDialogProps) {\n  const [selectedParticipants, setSelectedParticipants] = useState<string[]>([]);\n  const { toast } = useToast();\n\n  const { getParticipantData } = useAssignmentHelpers();\n\n  const form = useForm({\n    defaultValues: {\n      title: '',\n      type: '',\n      description: '',\n      date: '',\n      time: '',\n      duration: '60',\n      agenda: [] as string[],\n    }\n  });\n\n  const createMeetingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest('POST', '/api/meetings', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/meetings'] });\n      onOpenChange(false);\n      form.reset();\n      setSelectedParticipants([]);\n      toast({\n        title: \"Success\",\n        description: \"Meeting created successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create meeting\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    const participantEmails = getParticipantData(selectedParticipants);\n\n    createMeetingMutation.mutate({\n      ...data,\n      participants: participantEmails,\n    });\n  };\n\n  const handleMeetingTypeChange = (type: string) => {\n    const template = meetingTemplates[type as keyof typeof meetingTemplates];\n    if (template) {\n      form.setValue('title', template.title);\n      form.setValue('duration', template.duration);\n      form.setValue('agenda', template.agenda);\n    }\n  };\n\n  const handleParticipantsChange = (participantIds: string | string[]) => {\n    setSelectedParticipants(Array.isArray(participantIds) ? participantIds : [participantIds]);\n  };\n\n  const addAgendaItem = () => {\n    const currentAgenda = form.getValues('agenda') || [];\n    form.setValue('agenda', [...currentAgenda, '']);\n  };\n\n  const removeAgendaItem = (index: number) => {\n    const currentAgenda = form.getValues('agenda') || [];\n    form.setValue('agenda', currentAgenda.filter((_, i) => i !== index));\n  };\n\n  const updateAgendaItem = (index: number, value: string) => {\n    const currentAgenda = form.getValues('agenda') || [];\n    const newAgenda = [...currentAgenda];\n    newAgenda[index] = value;\n    form.setValue('agenda', newAgenda);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create New Meeting</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Meeting Type and Basic Info */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Meeting Type</FormLabel>\n                    <Select \n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        handleMeetingTypeChange(value);\n                      }} \n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-meeting-type\">\n                          <SelectValue placeholder=\"Select meeting type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"marketing\">Marketing Meeting</SelectItem>\n                        <SelectItem value=\"focus_songs_update\">Focus Songs Update</SelectItem>\n                        <SelectItem value=\"focus_songs_strategy\">Focus Songs Strategy</SelectItem>\n                        <SelectItem value=\"weekly_recap\">Weekly Recap</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Meeting Title</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-meeting-title\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} data-testid=\"textarea-meeting-description\" />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            {/* Date and Time */}\n            <div className=\"grid grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-meeting-date\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"time\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Time</FormLabel>\n                    <FormControl>\n                      <Input type=\"time\" {...field} data-testid=\"input-meeting-time\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"duration\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Duration (minutes)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" {...field} data-testid=\"input-meeting-duration\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Participants */}\n            <FormField\n              control={form.control}\n              name=\"participants\"\n              render={() => (\n                <FormItem>\n                  <FormLabel>Participants</FormLabel>\n                  <FormControl>\n                    <TeamMemberSelector\n                      value={selectedParticipants}\n                      onValueChange={handleParticipantsChange}\n                      placeholder=\"Select participants...\"\n                      multiple={true}\n                      context=\"meeting\"\n                      className=\"w-full\"\n                      data-testid=\"input-participants\"\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            {/* Agenda */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <FormLabel>Agenda</FormLabel>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addAgendaItem}\n                  data-testid=\"button-add-agenda-item\"\n                >\n                  Add Item\n                </Button>\n              </div>\n              \n              <div className=\"space-y-2\">\n                {(form.watch('agenda') || []).map((item: string, index: number) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <Input\n                      value={item}\n                      onChange={(e) => updateAgendaItem(index, e.target.value)}\n                      placeholder={`Agenda item ${index + 1}`}\n                      data-testid={`input-agenda-item-${index}`}\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => removeAgendaItem(index)}\n                      data-testid={`button-remove-agenda-item-${index}`}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createMeetingMutation.isPending}\n                data-testid=\"button-create-meeting\"\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              >\n                {createMeetingMutation.isPending ? 'Creating...' : 'Create Meeting'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11511},"client/src/components/tasks/task-item.tsx":{"content":"import { format, isPast } from \"date-fns\";\nimport { CheckCircle, Clock, AlertCircle, User, MoreVertical, Edit, Trash2, Play, Pause, X, RotateCcw } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\n\ninterface TaskItemProps {\n  task: any;\n  onStatusChange: (taskId: string, status: string) => void;\n  onEditTask: (task: any) => void;\n  onDeleteTask: (taskId: string) => void;\n  isUpdating?: boolean;\n}\n\nexport default function TaskItem({ task, onStatusChange, onEditTask, onDeleteTask, isUpdating }: TaskItemProps) {\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'low':\n        return 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300';\n      default:\n        return 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'done':\n        return 'bg-green-500 text-white';\n      case 'in_progress':\n        return 'bg-blue-500 text-white';\n      case 'paused':\n        return 'bg-yellow-500 text-white';\n      case 'not_done':\n        return 'bg-red-500 text-white';\n      case 'cancelled':\n        return 'bg-gray-500 text-white';\n      case 'todo':\n      default:\n        return 'bg-gray-300 text-gray-700';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'done':\n        return <CheckCircle className=\"w-3 h-3\" />;\n      case 'in_progress':\n        return <Play className=\"w-3 h-3\" />;\n      case 'paused':\n        return <Pause className=\"w-3 h-3\" />;\n      case 'not_done':\n        return <X className=\"w-3 h-3\" />;\n      case 'cancelled':\n        return <RotateCcw className=\"w-3 h-3\" />;\n      case 'todo':\n      default:\n        return <Clock className=\"w-3 h-3\" />;\n    }\n  };\n\n  const getChannelIcon = (channel: string) => {\n    switch (channel) {\n      case 'youtube':\n        return 'ðŸ“º';\n      case 'social_media':\n        return 'ðŸ“±';\n      case 'spotify':\n        return 'ðŸŽµ';\n      case 'radio':\n        return 'ðŸ“»';\n      default:\n        return 'ðŸ“‹';\n    }\n  };\n\n  const formatStatus = (status: string) => {\n    switch (status) {\n      case 'todo':\n        return 'To Do';\n      case 'in_progress':\n        return 'In Progress';\n      case 'not_done':\n        return 'Not Done';\n      default:\n        return status.charAt(0).toUpperCase() + status.slice(1);\n    }\n  };\n\n  const handleStatusChange = (newStatus: string) => {\n    onStatusChange(task.id, newStatus);\n  };\n\n  const handleEditClick = () => {\n    onEditTask(task);\n  };\n\n  const handleDeleteClick = () => {\n    if (confirm('Are you sure you want to delete this task?')) {\n      onDeleteTask(task.id);\n    }\n  };\n\n  const isOverdue = task.deadline && isPast(new Date(task.deadline)) && !['done', 'cancelled'].includes(task.status);\n\n  return (\n    <Card className={`transition-colors ${task.status === 'done' ? 'opacity-75' : ''} ${isOverdue ? 'border-red-300' : ''}`} data-testid={`task-item-${task.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start space-x-4\">\n          <div className=\"mt-1\">\n            {task.status === 'done' ? (\n              <div className=\"w-5 h-5 bg-green-500 border-2 border-green-500 rounded flex items-center justify-center\">\n                <CheckCircle className=\"w-3 h-3 text-white\" />\n              </div>\n            ) : (\n              <Checkbox\n                checked={false}\n                onCheckedChange={() => handleStatusChange('done')}\n                disabled={isUpdating}\n                data-testid={`task-checkbox-${task.id}`}\n              />\n            )}\n          </div>\n          \n          <div className=\"flex-1\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"space-y-1 flex-1\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 \n                    className={`font-medium ${task.status === 'done' ? 'line-through text-muted-foreground' : 'text-foreground'}`}\n                    data-testid={`task-title-${task.id}`}\n                  >\n                    {task.title}\n                  </h4>\n                  <div className=\"flex items-center gap-2\">\n                    {/* Status Badge */}\n                    <Badge className={`${getStatusColor(task.status)} text-xs flex items-center gap-1`}>\n                      {getStatusIcon(task.status)}\n                      {formatStatus(task.status)}\n                    </Badge>\n                    \n                    {/* Priority Badge */}\n                    <Badge className={`${getPriorityColor(task.priority)} text-xs`}>\n                      {task.priority}\n                    </Badge>\n\n                    {/* 3-dot Menu */}\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"h-8 w-8 p-0\"\n                          data-testid={`task-menu-${task.id}`}\n                        >\n                          <MoreVertical className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\" className=\"w-48\">\n                        <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                        <DropdownMenuSeparator />\n                        \n                        <DropdownMenuItem onClick={handleEditClick} data-testid={`edit-task-${task.id}`}>\n                          <Edit className=\"h-4 w-4 mr-2\" />\n                          Edit Task\n                        </DropdownMenuItem>\n                        \n                        <DropdownMenuSeparator />\n                        <DropdownMenuLabel>Change Status</DropdownMenuLabel>\n                        \n                        <DropdownMenuItem \n                          onClick={() => handleStatusChange('todo')}\n                          disabled={task.status === 'todo'}\n                          data-testid={`status-todo-${task.id}`}\n                        >\n                          <Clock className=\"h-4 w-4 mr-2\" />\n                          To Do\n                        </DropdownMenuItem>\n                        \n                        <DropdownMenuItem \n                          onClick={() => handleStatusChange('in_progress')}\n                          disabled={task.status === 'in_progress'}\n                          data-testid={`status-in-progress-${task.id}`}\n                        >\n                          <Play className=\"h-4 w-4 mr-2\" />\n                          In Progress\n                        </DropdownMenuItem>\n                        \n                        <DropdownMenuItem \n                          onClick={() => handleStatusChange('done')}\n                          disabled={task.status === 'done'}\n                          data-testid={`status-done-${task.id}`}\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\n                          Done\n                        </DropdownMenuItem>\n                        \n                        <DropdownMenuItem \n                          onClick={() => handleStatusChange('paused')}\n                          disabled={task.status === 'paused'}\n                          data-testid={`status-paused-${task.id}`}\n                        >\n                          <Pause className=\"h-4 w-4 mr-2\" />\n                          Paused\n                        </DropdownMenuItem>\n                        \n                        <DropdownMenuItem \n                          onClick={() => handleStatusChange('not_done')}\n                          disabled={task.status === 'not_done'}\n                          data-testid={`status-not-done-${task.id}`}\n                        >\n                          <X className=\"h-4 w-4 mr-2\" />\n                          Not Done\n                        </DropdownMenuItem>\n                        \n                        <DropdownMenuItem \n                          onClick={() => handleStatusChange('cancelled')}\n                          disabled={task.status === 'cancelled'}\n                          data-testid={`status-cancelled-${task.id}`}\n                        >\n                          <RotateCcw className=\"h-4 w-4 mr-2\" />\n                          Cancelled\n                        </DropdownMenuItem>\n                        \n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem \n                          onClick={handleDeleteClick}\n                          className=\"text-red-600 focus:text-red-600\"\n                          data-testid={`delete-task-${task.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-2\" />\n                          Delete Task\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </div>\n                \n                {task.description && (\n                  <p className={`text-sm ${task.status === 'done' ? 'text-muted-foreground' : 'text-muted-foreground'}`}>\n                    {task.description}\n                  </p>\n                )}\n                \n                <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                  {task.channel && (\n                    <div className=\"flex items-center gap-1\">\n                      <span>{getChannelIcon(task.channel)}</span>\n                      <span className=\"capitalize\">{task.channel.replace('_', ' ')}</span>\n                    </div>\n                  )}\n                  \n                  {task.assignedToName && (\n                    <div className=\"flex items-center gap-1\">\n                      <User className=\"w-3 h-3\" />\n                      <span>{task.assignedToName}</span>\n                    </div>\n                  )}\n                  \n                  {task.deadline && (\n                    <div className={`flex items-center gap-1 ${isOverdue ? 'text-red-600 font-medium' : ''}`}>\n                      {isOverdue ? <AlertCircle className=\"w-3 h-3\" /> : <Clock className=\"w-3 h-3\" />}\n                      <span>{format(new Date(task.deadline), 'MMM d, yyyy')}</span>\n                      {isOverdue && <span className=\"text-red-600 font-medium\">(Overdue)</span>}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11209},"client/src/components/team/team-member.tsx":{"content":"import { Mail, Edit, Trash2 } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface TeamMemberProps {\n  member: any;\n  onEdit?: () => void;\n  onDelete?: () => void;\n}\n\nexport default function TeamMember({ member, onEdit, onDelete }: TeamMemberProps) {\n  const getDepartmentColor = (department: string) => {\n    switch (department) {\n      case 'marketing':\n        return 'bg-green-500';\n      case 'digital':\n        return 'bg-blue-500';\n      case 'ar_international':\n        return 'bg-purple-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getDepartmentName = (department: string) => {\n    switch (department) {\n      case 'marketing':\n        return 'Marketing';\n      case 'digital':\n        return 'Digital';\n      case 'ar_international':\n        return 'A&R & International';\n      default:\n        return department;\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <Card data-testid={`team-member-card-${member.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center space-x-3 mb-3\">\n          <div className={`w-12 h-12 ${getDepartmentColor(member.department)} rounded-full flex items-center justify-center text-white text-sm font-medium`}>\n            {getInitials(member.name)}\n          </div>\n          <div>\n            <h4 className=\"font-medium text-foreground\" data-testid={`member-name-${member.id}`}>\n              {member.name}\n            </h4>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`member-title-${member.id}`}>\n              {member.jobTitle}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Badge variant=\"outline\" data-testid={`member-department-${member.id}`}>\n            {getDepartmentName(member.department)}\n          </Badge>\n          \n          {member.email && (\n            <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n              <Mail className=\"w-3 h-3\" />\n              <span data-testid={`member-email-${member.id}`}>{member.email}</span>\n            </div>\n          )}\n          \n          {member.responsibilities && (\n            <p className=\"text-xs text-muted-foreground mt-2\" data-testid={`member-responsibilities-${member.id}`}>\n              {member.responsibilities}\n            </p>\n          )}\n        </div>\n\n        <div className=\"flex space-x-2 mt-4\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={onEdit}\n            data-testid={`member-edit-${member.id}`}\n          >\n            <Edit className=\"w-3 h-3 mr-1\" />\n            Edit\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={onDelete}\n            data-testid={`member-delete-${member.id}`}\n          >\n            <Trash2 className=\"w-3 h-3 mr-1\" />\n            Delete\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3207},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Overview\n\nThis is a full-stack web application designed to manage weekly meetings for Roton's music team. The application helps coordinate meetings across three departments (Marketing, Digital, A&R & International) with standardized meeting types including Marketing Meetings, Focus Songs Update/Strategy meetings, and Weekly Recap sessions. The system manages team members, tracks focus songs across multiple channels (YouTube, social media, Spotify, radio), assigns tasks with deadlines, and maintains meeting minutes with structured agendas.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **API Pattern**: RESTful API with CRUD operations for all entities\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: OpenID Connect integration with Replit Auth using Passport.js\n- **Session Management**: Express sessions stored in PostgreSQL with connect-pg-simple\n\n## Database Design\n- **Database**: PostgreSQL with Neon serverless hosting\n- **Schema Management**: Drizzle Kit for migrations and schema generation\n- **Key Entities**:\n  - Users (team members with department and role assignments)\n  - Meetings (with type-specific templates and participant management)\n  - Focus Songs (tracking progress across multiple channels)\n  - Tasks (with assignments, deadlines, and status tracking)\n  - Meeting Minutes (structured agenda and decision tracking)\n\n## Authentication & Authorization\n- **Authentication Provider**: Replit OpenID Connect integration\n- **Session Storage**: PostgreSQL-backed sessions with 7-day TTL\n- **Authorization**: Role-based access with department-specific permissions\n- **Security**: HTTP-only cookies with secure flags for session management\n\n## Project Structure\n- **Monorepo Layout**: Client, server, and shared code in separate directories\n- **Shared Schema**: Common TypeScript types and Zod schemas in `/shared`\n- **Type Safety**: End-to-end TypeScript with strict compilation settings\n- **Build Process**: Vite for frontend bundling, esbuild for server compilation\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with WebSocket connections\n- **Connection Pooling**: @neondatabase/serverless with WebSocket constructor\n\n## Email Services\n- **SendGrid**: Email notifications for task assignments and meeting reminders\n- **Configuration**: API key and sender email configuration via environment variables\n\n## Authentication Services\n- **Replit OIDC**: OpenID Connect provider for user authentication\n- **Session Storage**: PostgreSQL table for distributed session management\n\n## Development Tools\n- **Replit Integration**: Custom Vite plugins for development banner and cartographer\n- **Runtime Error Handling**: Replit error overlay for development debugging\n\n## UI Framework\n- **Radix UI**: Headless UI primitives for accessibility and behavior\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Consistent icon library for UI elements\n\n## Build & Development\n- **Vite**: Fast development server and optimized production builds\n- **TypeScript**: Strict type checking across frontend and backend\n- **ESM**: Modern ES modules throughout the application stack","size_bytes":3843},"client/src/components/meetings/edit-meeting-dialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertMeetingSchema, type Meeting } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface EditMeetingDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  meeting: Meeting | null;\n  meetingId: string | null;\n}\n\nconst meetingTemplates = {\n  marketing: {\n    title: 'Marketing Meeting',\n    agenda: [\n      'Quick round of priorities',\n      'Active songs (press, social, radio, content, video)',\n      'New tasks assignment',\n      'Weekly calendar review',\n      'Final summary and assignments'\n    ],\n    duration: '60'\n  },\n  focus_songs_update: {\n    title: 'Focus Songs Update Meeting',\n    agenda: [\n      'Focus songs updates (15 min per song)',\n      'Last week\\'s actions and results',\n      'This week\\'s plan',\n      'Back catalog song selection (mandatory)',\n      'Confirm tasks per department'\n    ],\n    duration: '90'\n  },\n  focus_songs_strategy: {\n    title: 'Focus Songs Strategy Meeting',\n    agenda: [\n      'Follow-up on last week\\'s proposals',\n      'Analyze each song current status',\n      'New ideas and strategies',\n      'Clear actions and responsibilities',\n      'Recap of assignments and deadlines'\n    ],\n    duration: '120'\n  },\n  weekly_recap: {\n    title: 'Weekly Recap Meeting',\n    agenda: [\n      'Quick round of accomplishments',\n      'Obstacles and challenges',\n      'Progress recap on focus songs',\n      'Notes for next week',\n      'Action items review'\n    ],\n    duration: '45'\n  }\n};\n\nexport default function EditMeetingDialog({ open, onOpenChange, meeting, meetingId }: EditMeetingDialogProps) {\n  const [selectedParticipants, setSelectedParticipants] = useState<string[]>([]);\n  const { toast } = useToast();\n\n  const { data: teamMembers } = useQuery({\n    queryKey: ['/api/team-members'],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertMeetingSchema.extend({\n      title: insertMeetingSchema.shape.title.min(1, \"Meeting title is required\"),\n      date: insertMeetingSchema.shape.date.refine(val => val !== \"\", \"Date is required\"),\n      time: insertMeetingSchema.shape.time.refine(val => val !== \"\", \"Time is required\"),\n    })),\n    defaultValues: {\n      title: '',\n      type: '',\n      description: '',\n      date: '',\n      time: '',\n      duration: '60',\n      agenda: [] as string[],\n      participants: [] as string[],\n      createdBy: '',\n      status: 'scheduled',\n    }\n  });\n\n  const updateMeetingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (!meetingId) throw new Error('Meeting ID is required');\n      await apiRequest('PATCH', `/api/meetings/${meetingId}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/meetings'] });\n      onOpenChange(false);\n      toast({\n        title: \"Success\",\n        description: \"Meeting updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update meeting\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Initialize form with meeting data when meeting changes\n  useEffect(() => {\n    if (meeting && open) {\n      // Format date for input field\n      const formattedDate = meeting.date ? format(new Date(meeting.date), 'yyyy-MM-dd') : '';\n      \n      form.reset({\n        title: meeting.title || '',\n        type: meeting.type || '',\n        description: meeting.description || '',\n        date: formattedDate,\n        time: meeting.time || '',\n        duration: meeting.duration || '60',\n        agenda: meeting.agenda || [],\n        participants: meeting.participants || [],\n        createdBy: meeting.createdBy || '',\n        status: meeting.status || 'scheduled',\n      });\n\n      // Map participants to team member IDs\n      if (meeting.participants && Array.isArray(teamMembers)) {\n        const participantIds = meeting.participants.map(participantEmail => {\n          const member = teamMembers.find((m: any) => \n            m.email === participantEmail || m.name === participantEmail\n          );\n          return member?.id;\n        }).filter(Boolean);\n        setSelectedParticipants(participantIds);\n      }\n    }\n  }, [meeting, open, teamMembers, form]);\n\n  const onSubmit = (data: any) => {\n    const participantEmails = selectedParticipants.map(id => {\n      const member = Array.isArray(teamMembers) ? teamMembers.find((m: any) => m.id === id) : undefined;\n      return member?.email || member?.name;\n    }).filter(Boolean);\n\n    updateMeetingMutation.mutate({\n      ...data,\n      participants: participantEmails,\n    });\n  };\n\n  const handleMeetingTypeChange = (type: string) => {\n    const template = meetingTemplates[type as keyof typeof meetingTemplates];\n    if (template) {\n      form.setValue('title', template.title);\n      form.setValue('duration', template.duration);\n      form.setValue('agenda', template.agenda);\n    }\n  };\n\n  const handleParticipantToggle = (memberId: string) => {\n    setSelectedParticipants(prev => \n      prev.includes(memberId)\n        ? prev.filter(id => id !== memberId)\n        : [...prev, memberId]\n    );\n  };\n\n  const removeParticipant = (memberId: string) => {\n    setSelectedParticipants(prev => prev.filter(id => id !== memberId));\n  };\n\n  const addAgendaItem = () => {\n    const currentAgenda = form.getValues('agenda') || [];\n    form.setValue('agenda', [...currentAgenda, '']);\n  };\n\n  const removeAgendaItem = (index: number) => {\n    const currentAgenda = form.getValues('agenda') || [];\n    form.setValue('agenda', currentAgenda.filter((_, i) => i !== index));\n  };\n\n  const updateAgendaItem = (index: number, value: string) => {\n    const currentAgenda = form.getValues('agenda') || [];\n    const newAgenda = [...currentAgenda];\n    newAgenda[index] = value;\n    form.setValue('agenda', newAgenda);\n  };\n\n  if (!meeting) {\n    return null;\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Meeting</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Meeting Type and Basic Info */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Meeting Type</FormLabel>\n                    <Select \n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        handleMeetingTypeChange(value);\n                      }} \n                      value={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-meeting-type\">\n                          <SelectValue placeholder=\"Select meeting type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"marketing\">Marketing Meeting</SelectItem>\n                        <SelectItem value=\"focus_songs_update\">Focus Songs Update</SelectItem>\n                        <SelectItem value=\"focus_songs_strategy\">Focus Songs Strategy</SelectItem>\n                        <SelectItem value=\"weekly_recap\">Weekly Recap</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Meeting Title</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-edit-meeting-title\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} data-testid=\"textarea-edit-meeting-description\" />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            {/* Date and Time */}\n            <div className=\"grid grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-edit-meeting-date\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"time\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Time</FormLabel>\n                    <FormControl>\n                      <Input type=\"time\" {...field} data-testid=\"input-edit-meeting-time\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"duration\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Duration (minutes)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" {...field} data-testid=\"input-edit-meeting-duration\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Participants */}\n            <div className=\"space-y-3\">\n              <FormLabel>Participants</FormLabel>\n              \n              {/* Selected Participants */}\n              {selectedParticipants.length > 0 && (\n                <div className=\"flex flex-wrap gap-2 p-3 border rounded-md bg-muted/30\">\n                  {selectedParticipants.map(memberId => {\n                    const member = Array.isArray(teamMembers) ? teamMembers.find((m: any) => m.id === memberId) : undefined;\n                    return member ? (\n                      <Badge key={memberId} variant=\"secondary\" className=\"pr-1\">\n                        {member.name}\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"ml-1 h-4 w-4 p-0\"\n                          onClick={() => removeParticipant(memberId)}\n                        >\n                          <X className=\"w-3 h-3\" />\n                        </Button>\n                      </Badge>\n                    ) : null;\n                  })}\n                </div>\n              )}\n              \n              {/* Available Participants */}\n              <div className=\"grid grid-cols-2 gap-2 max-h-32 overflow-y-auto border rounded-md p-3\">\n                {Array.isArray(teamMembers) && teamMembers.map((member: any) => (\n                  <label\n                    key={member.id}\n                    className=\"flex items-center space-x-2 cursor-pointer hover:bg-muted/50 p-2 rounded\"\n                  >\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedParticipants.includes(member.id)}\n                      onChange={() => handleParticipantToggle(member.id)}\n                      className=\"rounded border-border\"\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm font-medium\">{member.name}</div>\n                      <div className=\"text-xs text-muted-foreground\">{member.jobTitle}</div>\n                    </div>\n                  </label>\n                ))}\n              </div>\n            </div>\n\n            {/* Agenda */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <FormLabel>Agenda</FormLabel>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addAgendaItem}\n                  data-testid=\"button-add-edit-agenda-item\"\n                >\n                  Add Item\n                </Button>\n              </div>\n              \n              <div className=\"space-y-2\">\n                {(form.watch('agenda') || []).map((item: string, index: number) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <Input\n                      value={item}\n                      onChange={(e) => updateAgendaItem(index, e.target.value)}\n                      placeholder={`Agenda item ${index + 1}`}\n                      data-testid={`input-edit-agenda-item-${index}`}\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => removeAgendaItem(index)}\n                      data-testid={`button-remove-edit-agenda-item-${index}`}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updateMeetingMutation.isPending}\n                data-testid=\"button-update-meeting\"\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              >\n                {updateMeetingMutation.isPending ? 'Updating...' : 'Update Meeting'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15161},"client/src/components/ui/team-member-selector.tsx":{"content":"import { useState } from \"react\";\nimport { Check, ChevronsUpDown, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { useTeamMembers, TeamMemberOption } from \"@/hooks/use-team-members\";\n\ninterface TeamMemberSelectorProps {\n  value?: string | string[];\n  onValueChange: (value: string | string[]) => void;\n  placeholder?: string;\n  multiple?: boolean;\n  context?: 'youtube' | 'social_media' | 'spotify' | 'radio' | 'press' | 'meeting' | 'task';\n  suggestByRole?: 'marketing' | 'digital' | 'ar_international';\n  className?: string;\n  disabled?: boolean;\n  'data-testid'?: string;\n}\n\nexport function TeamMemberSelector({\n  value,\n  onValueChange,\n  placeholder = \"Select team member...\",\n  multiple = false,\n  context,\n  suggestByRole,\n  className,\n  disabled = false,\n  'data-testid': testId,\n}: TeamMemberSelectorProps) {\n  const [open, setOpen] = useState(false);\n  const { allMembers, getSuggestedMembers, isLoading } = useTeamMembers({ suggestByRole });\n\n  const selectedValues = Array.isArray(value) ? value : value ? [value] : [];\n  const selectedMembers = selectedValues.map(id => allMembers.find(m => m.id === id)).filter(Boolean) as TeamMemberOption[];\n\n  const suggestedMembers = context ? getSuggestedMembers(context) : [];\n  const remainingMembers = allMembers.filter(member => \n    !suggestedMembers.some(suggested => suggested.id === member.id)\n  );\n\n  const handleSelect = (memberId: string) => {\n    if (multiple) {\n      const newSelection = selectedValues.includes(memberId)\n        ? selectedValues.filter(id => id !== memberId)\n        : [...selectedValues, memberId];\n      onValueChange(newSelection);\n    } else {\n      onValueChange(selectedValues.includes(memberId) ? '' : memberId);\n      setOpen(false);\n    }\n  };\n\n  const getDepartmentColor = (department: string) => {\n    switch (department) {\n      case 'marketing':\n        return 'bg-green-500';\n      case 'digital':\n        return 'bg-blue-500';\n      case 'ar_international':\n        return 'bg-purple-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const renderMemberItem = (member: TeamMemberOption, isSuggested = false) => (\n    <CommandItem\n      key={member.id}\n      value={member.id}\n      onSelect={() => handleSelect(member.id)}\n      className=\"flex items-center space-x-3 p-3\"\n      data-testid={`${testId}-option-${member.id}`}\n    >\n      <div className={cn(\n        \"w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium\",\n        getDepartmentColor(member.department)\n      )}>\n        {member.initials}\n      </div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"font-medium\">{member.name}</span>\n          {isSuggested && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              Suggested\n            </Badge>\n          )}\n        </div>\n        <div className=\"text-sm text-muted-foreground\">\n          {member.jobTitle} â€¢ {member.department.replace('_', ' & ').replace(/\\b\\w/g, l => l.toUpperCase())}\n        </div>\n      </div>\n      <Check\n        className={cn(\n          \"w-4 h-4\",\n          selectedValues.includes(member.id) ? \"opacity-100\" : \"opacity-0\"\n        )}\n      />\n    </CommandItem>\n  );\n\n  if (isLoading) {\n    return (\n      <Button\n        variant=\"outline\"\n        className={cn(\"justify-between\", className)}\n        disabled\n        data-testid={testId}\n      >\n        Loading team members...\n        <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n      </Button>\n    );\n  }\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\"justify-between\", className)}\n          disabled={disabled}\n          data-testid={testId}\n        >\n          {selectedMembers.length === 0 ? (\n            <span className=\"text-muted-foreground\">{placeholder}</span>\n          ) : multiple ? (\n            <div className=\"flex items-center space-x-1 flex-wrap\">\n              {selectedMembers.slice(0, 2).map(member => (\n                <Badge key={member.id} variant=\"secondary\" className=\"text-xs\">\n                  {member.name}\n                </Badge>\n              ))}\n              {selectedMembers.length > 2 && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  +{selectedMembers.length - 2} more\n                </Badge>\n              )}\n            </div>\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <div className={cn(\n                \"w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-medium\",\n                getDepartmentColor(selectedMembers[0].department)\n              )}>\n                {selectedMembers[0].initials}\n              </div>\n              <span>{selectedMembers[0].name}</span>\n            </div>\n          )}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0\" data-testid={`${testId}-popover`}>\n        <Command>\n          <CommandInput placeholder=\"Search team members...\" />\n          <CommandList>\n            <CommandEmpty>No team member found.</CommandEmpty>\n            \n            {suggestedMembers.length > 0 && (\n              <CommandGroup heading=\"Suggested for this role\">\n                {suggestedMembers.map(member => renderMemberItem(member, true))}\n              </CommandGroup>\n            )}\n            \n            {remainingMembers.length > 0 && (\n              <CommandGroup heading={suggestedMembers.length > 0 ? \"All Members\" : \"Team Members\"}>\n                {remainingMembers.map(member => renderMemberItem(member))}\n              </CommandGroup>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":6275},"client/src/hooks/use-team-members.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { TeamMember } from \"@shared/schema\";\n\nexport interface TeamMemberOption {\n  id: string;\n  name: string;\n  email: string;\n  department: string;\n  jobTitle: string;\n  initials: string;\n}\n\nexport interface UseTeamMembersOptions {\n  filterByDepartment?: string;\n  suggestByRole?: 'marketing' | 'digital' | 'ar_international';\n}\n\nexport function useTeamMembers(options: UseTeamMembersOptions = {}) {\n  const { data: teamMembers, isLoading, error } = useQuery({\n    queryKey: ['/api/team-members'],\n  });\n\n  // Transform team members to standardized options\n  const memberOptions: TeamMemberOption[] = Array.isArray(teamMembers) \n    ? teamMembers.map((member: any) => ({\n        id: member.id,\n        name: member.name,\n        email: member.email || '',\n        department: member.department,\n        jobTitle: member.jobTitle || '',\n        initials: getInitials(member.name),\n      }))\n    : [];\n\n  // Filter by department if specified\n  const filteredMembers = options.filterByDepartment\n    ? memberOptions.filter(member => member.department === options.filterByDepartment)\n    : memberOptions;\n\n  // Get suggested members based on role/department\n  const getSuggestedMembers = (context: 'youtube' | 'social_media' | 'spotify' | 'radio' | 'press' | 'meeting' | 'task') => {\n    const suggestions: TeamMemberOption[] = [];\n    \n    switch (context) {\n      case 'youtube':\n      case 'social_media':\n        suggestions.push(...memberOptions.filter(m => m.department === 'marketing' || m.department === 'digital'));\n        break;\n      case 'spotify':\n      case 'radio':\n      case 'press':\n        suggestions.push(...memberOptions.filter(m => m.department === 'ar_international' || m.department === 'marketing'));\n        break;\n      case 'meeting':\n        // For meetings, suggest all relevant department members\n        suggestions.push(...memberOptions);\n        break;\n      case 'task':\n        // For tasks, suggest based on the requesting department context\n        if (options.suggestByRole) {\n          suggestions.push(...memberOptions.filter(m => m.department === options.suggestByRole));\n        } else {\n          suggestions.push(...memberOptions);\n        }\n        break;\n    }\n    \n    return suggestions.slice(0, 5); // Limit to top 5 suggestions\n  };\n\n  // Get member by ID\n  const getMemberById = (id: string): TeamMemberOption | undefined => {\n    return memberOptions.find(member => member.id === id);\n  };\n\n  // Get member by name or email\n  const getMemberByNameOrEmail = (nameOrEmail: string): TeamMemberOption | undefined => {\n    return memberOptions.find(member => \n      member.name === nameOrEmail || member.email === nameOrEmail\n    );\n  };\n\n  // Convert member list to ID-name mapping for backward compatibility\n  const getMemberMapping = (): Record<string, string> => {\n    return memberOptions.reduce((acc, member) => {\n      acc[member.id] = member.name;\n      return acc;\n    }, {} as Record<string, string>);\n  };\n\n  // Get department members\n  const getDepartmentMembers = (department: string): TeamMemberOption[] => {\n    return memberOptions.filter(member => member.department === department);\n  };\n\n  return {\n    teamMembers: filteredMembers,\n    allMembers: memberOptions,\n    isLoading,\n    error,\n    getSuggestedMembers,\n    getMemberById,\n    getMemberByNameOrEmail,\n    getMemberMapping,\n    getDepartmentMembers,\n    \n    // Department shortcuts\n    marketingMembers: getDepartmentMembers('marketing'),\n    digitalMembers: getDepartmentMembers('digital'),\n    arMembers: getDepartmentMembers('ar_international'),\n  };\n}\n\nfunction getInitials(name: string): string {\n  return name\n    .split(' ')\n    .map(part => part.charAt(0))\n    .join('')\n    .toUpperCase()\n    .slice(0, 2);\n}\n\n// Helper hook for assignment handling\nexport function useAssignmentHelpers() {\n  const { getMemberById, getMemberByNameOrEmail } = useTeamMembers();\n\n  const getAssignmentData = (memberId: string) => {\n    const member = getMemberById(memberId);\n    return member ? {\n      assignedTo: member.id,\n      assignedToName: member.name,\n    } : {\n      assignedTo: '',\n      assignedToName: '',\n    };\n  };\n\n  const getParticipantData = (participantIds: string[]) => {\n    return participantIds.map(id => {\n      const member = getMemberById(id);\n      return member?.email || member?.name || '';\n    }).filter(Boolean);\n  };\n\n  return {\n    getAssignmentData,\n    getParticipantData,\n  };\n}","size_bytes":4483}},"version":1}